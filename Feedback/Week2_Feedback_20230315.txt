Starting code feedback for Shengge, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 4.98 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, MiniProject, week6, week7, week4, week3, week2, Feedback, HPC, week1, week5

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp 
.RData 
.Rhistory

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Shengge Tongâ€˜s CMEECoursework Repository

## Brief description: 
This folder conatins a set of scripts in weeks 1,2,3,4,5,6,7.

## Installation

```
git clone https://github.com/Midsummer874/CMEECourseWork.git
```


## Languages: 
Python 3.10.6, R 4.1.2, bash, shell,  LaTex

## Dependencies: 
Dependencies are listed in weekly folders.

## Project structure and Usage: 

### week 1

### week 2

### week 3

### week 4

### week 5

### week 6

### week 7

### MiniProject

### Feedback

### HPC



## Author name and contact

**Shengge Tong**

shengge.tong22@imperial.ac.uk

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 7 weekly directories: week1, week2, week3, week4, week5, week6, week7

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, sandbox, results, data

Found the following files: README.md, .gitignore

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEECoursework: Week 2

## Contents

- **Description**
- **Languages**
- **Dependencies**
- **Installation**
- **Project structure and Usage**
- **Author name and Contact**

## Description
- **Python**

Learned from [The Multilingual Quantitative Biologist](https://mhasoba.github.io/TheMulQuaBio/intro.html) 

## Languages

python

## Dependencies

sys - used for taking the input parameter from command line

pandas - for csv reading

numpy - for mathematical operation

csv - for csv reading

re - for matching patterns or strings

os - used to split the string of input and eliminate the extension in R

doctest - for testing modules

## Installation

```
git clone https://github.com/Midsummer874/CMEECourseWork.git
```

## Project structure and Usage 

- **CMEECourseWork/week2**

  - It contains 4 folders(code, data, results, sandbox) and 1 readme file.

- **CMEECourseWork/week2/data**

  - It contains data files.

- **CMEECourseWork/week2/sandbox**

  - It contains several test files.

- **CMEECourseWork/week2/code**

  - ***align_seqs_better.py:*** Script to align two sequences after taking an input from user.
 
  - ***align_seqs_fasta.py:*** Script to align two sequences after taking an input from user.
 
  - ***align_seqs.py:*** Takes the DNA sequences as an input from a single external file.

  - ***basic_csv.py:*** Read and write files

  - ***basic_io1.py:*** Script to align two sequences after taking an input from user.

  - ***basic_io2.py:*** Save the elements of a list to a file

  - ***basic_io3.py:*** To save an object (even complex) for later use

  - ***boilerplate.py:*** Description of this program or application.

  - ***cfexercise1.py:*** Some functions exemplifying the use of control statements

  - ***cfexercise2.py:*** Some functions exemplifying the use of control statements

  - ***control_flow.py:*** Describe the control flow

  - ***debugme.py:*** The debug script

  - ***dictionary:*** An exercise for the dictionary practical

  - ***lc1.py:*** An exercise for the list practical

  - ***lc2.py:*** An exercise for the list practical

  - ***loops.py:*** An example of different kinds of loops

  - ***MyExampleScript.py*** An example script

  - ***oaks.py:*** Finds just those taxa that are oak trees from a list of species

  - ***oaks_debugme.py:*** The debugme file of oaks

  - ***sysargv.py:*** A script for sys argv

  - ***test_control_flow.py:*** A test script for the control flow
  
  - ***tuple.py:*** An exercise for the tuple

## Author name and contact

**Shengge Tong**

shengge.tong22@imperial.ac.uk

**********************************************************************

Results directory is empty - good! 

Found 28 code files: cfexercise1.py, get_TreeHeight.py, align_seqs_better.ipynb, debugme.py, lc2.py, PP_regress_loc.R, align_seqs_fasta.py, FloridaYears.tex, control_flow.py, loops.py, cfexercise2.py, basic_io3.py, oaks.py, align_seqs_better.py, align_seqs.py, get_TreeHeight.R, dictionary.py, test_control_flow.py, oaks_debugme_groupwork.py, sysargv.py, tuple.py, basic_io1.py, basic_io2.py, boilerplate.py, MyExampleScript.py, lc1.py, basic_csv.py, oaks_debugme.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file cfexercise1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'

from cgitb import reset
import sys

def foo_1(x): #Calculate the root
  """
    Des:
	Function to calculate the root
    Arg:
    	x
    Return:
  	testout.txt
  """
    return "The square root of %d is %d" % (x, x ** 0.5)

def foo_2(x,y): #Compare two numbers
  """
    Des:
	Function to compare two numbers
    Arg:
    	x,y
    Return:
  	the larger number
  """
    if x > y:
        return "The larger number is %d" % x
    return "The larger number is %d" % y

def foo_3(x, y, z): #Get the ascending order
  """
    Des:
	Function to get the ascending order
    Arg:
    	x,y,z
    Return:
  	The ascending order
  """
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return "The ascending order is [%d,%d,%d]" % (x, y, z)

def foo_4(x): #Calculate the factorial
  """
    Des:
	Function to calculate the factorial
    Arg:
    	x
    Return:
  	number
  """
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return "The result is %d" % result

def foo_5(x): # a recursive function that calculates the factorial of x
  """
    Des:
	A recursive function that calculates the factorial of x
    Arg:
    	x
    Return:
  	The factorial result
  """
    if x == 1:
        return 1
    result = x * foo_5(x - 1)
    return "Factorial result is %d" %result
     
def foo_6(x): # Calculate the factorial of x in a different way; no if statement involved
  """
    Des:
	Calculate the factorial of x in a different way
    Arg:
    	x
    Return:
  	result
  """
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return "Rusult is %d" % facto
 
def main(argv):  # running all the functions with specified input
  """
    Des:
	The main function to run all the functions
    Arg:
    	argv
    Return:
  	0
  """
    print(foo_1(4))
    print(foo_2(5,7))
    print(foo_3(5,2,6))
    print(foo_4(8)) 
    print(foo_5(8))
    print(foo_6(8))

    return 0 



if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing cfexercise1.py...

cfexercise1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/cfexercise1.py", line 21
    return "The square root of %d is %d" % (x, x ** 0.5)
IndentationError: unexpected indent

======================================================================
Inspecting script file get_TreeHeight.py...

File contents are:

**********************************************************************
"""
Description:
This is the script for the week3 Groupwork on Tree Heights.

Required package for this script:
sys - used for taking argument from the command line
os - used for the elimination of extension from the input name when saving the output file
pandas - used to read the dataset
numpy - used for the mathematical computation

Date:
11 Dec 2022
"""

__author__ = "Xuan Wang xuan.wang22@imperial.ac.uk"
__appname__ = "get_TreeHeight.py"
__package__ = "sys, os, pandas, numpy"

# importing the required package
import sys
import os
import pandas as pd
import numpy as np

# taking the argument from command line
argv = str(sys.argv[1])

# loading dataset
path = ["../data/",argv]
treedata = pd.read_csv("".join(path))
# tree height definition
def TreeHeight(degrees, distance):
    """
    This function defines the function of tree height.
    """
    radians = degrees * np.pi / 180
    height = distance * np.tan(radians)
    return height

# adding the column of tree height to the data
treedata["Tree.Height.m"] = TreeHeight(treedata["Angle.degrees"], treedata["Distance.m"])

# select the first two rows of data
treedata = treedata.head(2)
treedata["Input_Name"] = argv

# saving the output file
path_results = ["../results/",os.path.splitext(argv)[0],"_treeheights.csv"]
treedata.to_csv("".join(path_results))


**********************************************************************

Testing get_TreeHeight.py...

get_TreeHeight.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/get_TreeHeight.py", line 26, in <module>
    argv = str(sys.argv[1])
IndexError: list index out of range

======================================================================
Inspecting script file align_seqs_better.ipynb...

File contents are:

**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bc74663e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import csv\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9db36f0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_score(s1, s2, l1, l2, startpoint):\n",
    "    \"\"\"\n",
    "    This function calculates the best source when s1, s2, l1, l2 and the startpoint are provided. \n",
    "    It aligns the shorter sequence at the startpoint location of the longer sequence and calculates the number of matching base pairs\n",
    "    If you want to import this function as a module, assign the longer sequence s1, and the shorter to s2. \n",
    "    l1 is length of the longest, l2 that of the shortest\n",
    "    \"\"\"\n",
    "    matched = \"\" # to hold string displaying alignements\n",
    "    score = 0\n",
    "    #import ipdb; ipdb.set_trace()\n",
    "    for i in range(l2):\n",
    "        if (i + startpoint) < l1:\n",
    "            if s1[i + startpoint] == s2[i]: # if the bases match\n",
    "                matched = matched + \"*\"\n",
    "                score = score + 1\n",
    "            else:\n",
    "                matched = matched + \"-\"\n",
    "\n",
    "    # some formatted output\n",
    "    print(\".\" * startpoint + matched)           \n",
    "    print(\".\" * startpoint + s2)\n",
    "    print(s1)\n",
    "    print(score) \n",
    "    print(\" \")\n",
    "\n",
    "    return score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "162d9419",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main(argv):\n",
    "    \"\"\"\n",
    "    Main entry point of the program.\n",
    "    This program takes a .txt file as input and then calculates the best score among the two sequences.\n",
    "    It prints the outout to another .txt file which is then stored in the results directory\n",
    "    \"\"\"\n",
    "    \n",
    "    # Opening the data file\n",
    "    with open('../data/seqs.txt', 'r') as f:\n",
    "        temp = []\n",
    "        for line in f:\n",
    "            temp.append(line.split('\\n')[0])\n",
    "\n",
    "    # Asigning the sequences\n",
    "    seq1 = temp[0]\n",
    "    seq2 = temp[1]\n",
    "\n",
    "    # Assign the longer sequence s1, and the shorter to s2\n",
    "    # l1 is length of the longest, l2 that of the shortest\n",
    "\n",
    "    l1 = len(seq1)\n",
    "    l2 = len(seq2)\n",
    "    if l1 >= l2:\n",
    "        s1 = seq1\n",
    "        s2 = seq2\n",
    "    else:\n",
    "        s1 = seq2\n",
    "        s2 = seq1\n",
    "        l1, l2 = l2, l1 # swap the two lengths\n",
    "    \n",
    "# now try to find the best match (highest score) for the two sequences\n",
    "    my_best_align = None\n",
    "    my_best_score = -1\n",
    "\n",
    "    for i in range(l1): # Note that you just take the last alignment with the highest score\n",
    "        z = calculate_score(s1, s2, l1, l2, i)\n",
    "        if z > my_best_score:\n",
    "            my_best_align = \".\" * i + s2 # think about what this is doing!\n",
    "            my_best_score = z \n",
    "    print(my_best_align)\n",
    "    print(s1)\n",
    "    print(\"Best score:\", my_best_score)\n",
    "\n",
    "    list_to_save = [my_best_align, s1, 'Best score: ', my_best_score]\n",
    "\n",
    "    f = open('../results/best_align.txt', 'w+')\n",
    "    for i in list_to_save:\n",
    "        f.write(str(i) + '\\n')\n",
    "    f.close() \n",
    "    return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4c87959",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == '__main__':\n",
    "    \"\"\"Makes sure the main function is called from the command line\"\"\"\n",
    "    status = main(sys.argv)\n",
    "    sys.exit(status)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4bc3c4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#####################\n",
    "# code to read FASTA file\n",
    "#####################\n",
    "def fasta_parser(args= ['../data/407228326.fasta', '../data/407228412.fasta']):\n",
    "    \n",
    "    hre=re.compile('>(\\S+)')\n",
    "    lre=re.compile('^(\\S+)$')\n",
    "    dict_fastas = {}\n",
    "    for x in range(1, 10):\n",
    "        d[\"string{0}\".format(x)] = \"Hello\"\n",
    "\n",
    "    for i in range(args):\n",
    "\n",
    "        f=open(args[i],'r')\n",
    "        lines=f.readlines()\n",
    "        \"Seq{0}\".format(i) = {}\n",
    "\n",
    "    \n",
    "    seq1={}\n",
    "\n",
    "    for line in lines:\n",
    "            outh = hre.search(line)\n",
    "            if outh:\n",
    "                    id=outh.group(1)\n",
    "            else:\n",
    "                    outl=lre.search(line)\n",
    "                    if(id in seq1.keys()):\n",
    "                            seq1[id] += outl.group(1)\n",
    "                    else:\n",
    "                            seq1[id]  =outl.group(1)\n",
    "                            dict_fastas[\"seq{0}\".format(i)] = \"Hello\"\n",
    "    f.close()\n",
    "    \n",
    "    f=open(arg2,'r')\n",
    "    lines=f.readlines()\n",
    "\n",
    "    seq2={}\n",
    "\n",
    "    for line in lines:\n",
    "            outh = hre.search(line)\n",
    "            if outh:\n",
    "                    id=outh.group(1)\n",
    "            else:\n",
    "                    outl=lre.search(line)\n",
    "                    if(id in seq2.keys()):\n",
    "                            seq2[id] += outl.group(1)\n",
    "                    else:\n",
    "                            seq2[id]  =outl.group(1)\n",
    "    f.close()\n",
    "    \n",
    "    return seq1, seq2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "7e1d3bbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def entry_point(argv):\n",
    "    if len(argv) != 3:\n",
    "        print(\"Too few or too many arguements...\")\n",
    "        print(\"Continuing with defaults..\")\n",
    "        seq1, seq2 = fasta_parser().values()\n",
    "        print(seq1)\n",
    "        print(\"##########################\")\n",
    "        print(seq2)\n",
    "    else:\n",
    "        try:\n",
    "            arg1 = argv[1]\n",
    "            arg2 = argv[2]\n",
    "            re.search(r'\\w+\\.fasta\\s\\w+\\.fasta', arg1 + \" \" + arg2).group()\n",
    "            print(\"Better to write a fasta parsing function\")\n",
    "            seq1, seq2 = fasta_parser().values()\n",
    "            print(seq1)\n",
    "            print(\"##########################\")\n",
    "            print(seq2)\n",
    "        except:\n",
    "            print(\"Going back to defaults since wrong inout was given\")\n",
    "            seq1, seq2 = fasta_parser().values()\n",
    "            print(seq1)\n",
    "            print(\"##########################\")\n",
    "            print(seq2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9df0508c",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Too few or too many arguements...\")\n",
    "print(\"Continuing with defaults..\")\n",
    "\n",
    "# code to read FASTA file\n",
    "f=open('../data/407228326.fasta','r')\n",
    "lines=f.readlines()\n",
    "\n",
    "hre=re.compile('>(\\S+)')\n",
    "lre=re.compile('^(\\S+)$')\n",
    "\n",
    "fasta1={}\n",
    "\n",
    "for line in lines:\n",
    "        outh = hre.search(line)\n",
    "        if outh:\n",
    "                id=outh.group(1)\n",
    "        else:\n",
    "                outl=lre.search(line)\n",
    "                if(id in fasta1.keys()):\n",
    "                        fasta1[id] += outl.group(1)\n",
    "                else:\n",
    "                        fasta1[id]  =outl.group(1)\n",
    "f.close()\n",
    "#####################\n",
    "# code to read FASTA file\n",
    "f=open('../data/407228412.fasta','r')\n",
    "lines=f.readlines()\n",
    "print(lines)\n",
    "hre=re.compile('>(\\S+)')\n",
    "lre=re.compile('^(\\S+)$')\n",
    "\n",
    "gene={}\n",
    "\n",
    "for line in lines:\n",
    "        outh = hre.search(line)\n",
    "        if outh:\n",
    "                id=outh.group(1)\n",
    "        else:\n",
    "                outl=lre.search(line)\n",
    "                if(id in gene.keys()):\n",
    "                        gene[id] += outl.group(1)\n",
    "                else:\n",
    "                        gene[id]  =outl.group(1)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c3b4d5f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3b7095f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "argv = ['xdfghj']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6c54eff3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Too few or too many arguements...\n",
      "Continuing with defaults..\n",
n",
      "##########################\n",
      "AGAATGGCGCAGCCACTTTGGAAGACAGTTTGGCAGTTTCTTACAAAGCTAAACATACTCTTACTATATGATCTAGCAATTGTGCTTCTAGGTATTTACTTACCCAAGGAGTTGAAAACTTATGCCCACACAAAAACCTGCACATGATGTTGATAGCATCTTTACCCATAATTGCCAAAAAGTTGAAGGAACCAAAGTGTCCTTCAAAAGGCGAATGGGTAGAACAACTGTGGTACATCCAGACAATGGAATATCATTCAGAGACAAAAAGCAATGAGCTGGCCGGGTGCGGTGTCTCATGCCTGTAATCCCAGCACTTTGGGAGGCTGAGGCGGGCGGACCATGTGGTCAGGAGATTGAGACCATCCTGGCTAACACAGTGAAAACCCATCTCTAAAAAAAAAAAAAAAAAACAACAGCTGGGCATGGTGGCAGGTGCCTGTAGTCCCAGCTACTCGGAGGCTGAGGCAGGAGAATGGCGTGAACCCGGGAGGCGCAGCTTGCAGTGAGCCGAGATCACACCACTGCACTCCAGCCTAGGAGACAGAGCGAGACTCTGTCTCAAAATAAATAAATAAATAAATAAATAAATAAATAAATAAATAAATAAAAGCAAGGAGCTATCAAGCCTTGAAAAGACATACAGGGGCCATAACTGCCTACTACTCAGTGAAAGAAGCTAGTCGGAAAAAGTTAATAGTGTATCGTTGATAGTGGATAAGTCAAAACTTCAGAGACAATGAAAATATCCGTGGTTTCCAGGGGATGGGGAGAGGGAGAGGCAGTGGAGCACGAGATTTTGAGGGCAGGGGATGTATTCCGCATAATACGGTAATGGTGGACACATGACTTGTGCACTTGCCACGACCCACAGAATGTACAACAGACAGAGTGAACCCTCATGTAAACTGTGGGAGTTCGTTAGTAATAATGTATCAATATTGTTCATCAGCTGTAACAATGCACCCACAGTAATGCAAAATGTTCATAACAGGAAACTCTGTGTGTGGGGATGTGTGTGTGGGGGGATACGATCTGTACTATCTGCCCAGTTGTCTGTAAACTTAAAACTGCTCTAAAAAATAAAGTGCATTAATTCCAAAACACCACAACTTCACGTGCAATTTCAACTTGCAACAGCCTGCTTTTAGTCTCCCCGGATCCTTCTGTTACTGTAGCACACGCCGCACCCTTGTGTATTCCATAAACCACACGATACCTGCACTCGCTTTGCTGTTGTTGCTTCAAACTGCCAATTCTCTTTCAAATATTTTTTGAGAGAGAAAACTGTCTTACACAGTCACAGCTGTTTCCATTTCCAGAGTTTATCTTCCCTTAGTCTAGGTCTAGATGTTCATCTCTTATCATCTTCTTCCTGCAGAACTTCCTTTCACATTTCTTTTTTTTTTTTTTTTTTTTTTTTTTGAGACGGAGTCTCCTTCATTGCCCAGGCTGGAGTGCAGTGGCGCCATCTCGGATCACGGCAAGCTCCGCCTCCCGGGTTCACGCCATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGACTACAGGTGCCCGCCACCACGCCCGGCTAATTTTTTGTATTTTTAGTAGAGACAGGGTTTCACTGTGTTAGCCAGGGGGGTCTCGAACTCCTGACCTCAGGTGATCCACCCGCCTTGGCCTCCCGAAGTGCTAGGATTACAGGCGTGAGCCACCGCGCCCAGCTAATTTTTGTATTTTTAGTAGAGATGGGGTTTCATCACGTTGGCCAGGCTGGTCTTGAACTCCTGACCTCAGGTGACCCAGCCGCCTCGGCCTCCCAAAGTGCTAGGATTACAGGCGTGAACCACCACGCCCGAACATGATTGATTTTTTTTATCGGGAGGTCATCCTTTTTCATGCCTGCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAGACACGGTATTGCTTTGTTGCCAGACTGGAGTGCAGTGGCACGATCTCGGCTCACTGCATCCTCTGACTCCCTGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCACGTGCCACCACGCCCGGCTAATTTTTATATTTTTAGTAGAGACGGGGTTTCACCATGTGGGCCAGGCTGGTCTCGTTCTCCTGACCTCACGATCTGCCACCTCGGCCTCCCAAAGTGCTGGGATGACAGGCGTGAGCCACCGCGCCCGGCCACCCGCTCGTTCTTGACTAGCCCCCGGATCTCGTGAGTACTCTCTGGAGTGTTTTGTTGCGTGCTGGGTTGTGTTCTATTCCTTGACATCGTTTTGAGATGTGTTCTCACAGGCAGTTAAGTCACTTGCAATCATTTGGATCCGTCTGGGCTTTGCTTTTCAGCTTTGTGAGGGTGGGTCCGGAGAAGCCTTTGGTTTCGGGATTACTTTCTCCCCTCGTACCCTTCCATACCCTTCCGAGGACTCTCCAGTGCCTGCCTCTGACAAGGTTTCTCCACTCAGCTGCTGGGAACACGCGATATCCCCAGCCCCGCGCGCACTCCCGGACTCCGCCCCTCTCATCTGGTGGTTCTCGTTTCCGACGCGGCTCCCACGTCTCTCTGCATCTCCGGCACTCGGCCGAGGACGCCGGGGGGAACCCCCTGCGGATGCCCGGAGCTCTCCGTGCAGTTCTCCGCCTCGTGAGTCATGGCTGCCGGGGCCTCTGCACGCGCCAGGTGCGTCTCCCCAGCCCAGCAAGCTCCTGGGGCTGAGTTTCCCATCGCTGCCCTGAGTCTGGGCGCGGCCACTGTCGTCTCACCCGACTCCCCACCCTTCTCTCGGGGACACTGCCCCACGTGGCCTCTTGCCCAGTGTCTGTCAATGGCCTGGGACCCCAGCCCTGCAGCAGCCCCAGGGGAGCGGCCGGGGATCGGGGCGGGGTGCCCAGGACGCGCCCTGATTGGCCCAGTGTTAGCCAATCAAGGCTCTCGCATCCCCATGGTGCTGATTGGTCCGCCTCCCAGGCCTGACCCAATCGGAGCATTCCTAGGAGGAGCGGCCCCAGAGCCCCTGACTCGGGGGTCCCAGAGCCCTCTGCACACCACAGCCCCGGTGTCCCCGTGTGTCCCTGGGTTCTCCCAGCCCTGGTGTCCCCTGAGTCTCTTCTTCACCGTCAGCCCTGGTGTCTCCCGTGTCCCTGCCACACCCTCATCCCTGGTGTCCCCCGTCACCCCATCCCCTCACCTCCTGGGCTCCTGAAGGTCCCATCTTGTGGGCCTCATTCATGGAACCAGGACGGGGCAGGTGGAGGCCTCTGGGGAGTTTGTCCAGAGAATGGAGGAGAAGCAGGGTCATGAGCAGGAGCGGTCTGGGCCACCCCTGCCTGTCCCCCGGGGGGTGCAGCCCGGAAGGAGTCCAGATGCATATGGCCCCGCAGTGCAGAGTCAGCCCCAAACCAGGCTGGTCCCAGGCAGGGTGGGGGCAGGAGGAGCCCTGGAGTGGCCCTGTGTTGGGGGTCGGGGGGCAGGCAGGGGGTCCTGGGGCTCAGAAGCGGAGGAGGTGGGCTGGAGGCCCCAGTGACCAACAGGCCCAGGGGAGTCAGGAGGTGGGGTGGACGGACCTGCAGGGACAGTGTCAGCGCTGAATGGGATGGAGAGCACAGGGAGCTGGGGCCGGGGGCAAGTCCACAGGGAGCTGGGGCCGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGCTGGGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGATGGGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGACTAGTCCATGGGGAGCTGGGTCTGGAGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGCTGCGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGGCTGGGGCTGGGACTAGTCCATGGGCAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGTTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGTCTCCTGGGGTTGCACCTGCACTCCTGTCTGCCCTTCCCTCTGCCGATGAAGCTCAGATCCCATGATAAGGAGGCACCTGCAGACCAGGGGTCCTGCACGGACAGCCCCAGAGGTGGACATTGAGGACTCGTAGGAGGACTTGGGTCTCATACGGCGGGTGGGGAGCAGGGCCCCTTCCTGGCTGAGGACACTTGGTGCTGTCCCCTCTCAAGGCTGTTTCCCCATCTGACAAAGGGGTCTCATGTGAGCCTCCCACCAAGTGAGTCGAGGAGGGCTGGCGCCACCCCCGTGGATTCGGAGTCCGTAAGAGGGGTGTCACCCGTCATGTCCCCACCCCGTGGGCACCTTCCCGTCTCTTGGAGGGTGGCCCATGGACATGAGTTCCTCACCCCGTGTCCCTCTTGGGGAAACAGGTTTCAGGAGCGATGGGTCTTGTAGCCTGGGACAGCCAGGCCACCTGGGTGCAGCAATGCCTGAAGGCCTCCTGGCACCGAGACAGGGGCAGGAGCAGATCCCACCAGCGGGAAGGTGGTGGGTTCTAGTGCTGGGATCCACCAGCTGACAGGTGGAGCTGCCAGTCTCCAGTGCTCAGCCCTCAGCGGGGCCTGCCTGGCAGCCCCACACACAGAGGGCATCGGGGTGGCGGGGGCACGTGTTACACGGGGGCCCTGGGTCTGAGTCATCCACTTCCTCCGAGTCTGGATGGGAGGACCCAGCGCCCCTCCTCCGCCCCCTCCTGATCTGGAAGCATAAATGGGGAGGGGAGAGCCCACTGGGTAGAAGGAACAGGGAGCGGCCAGGGTAAGTCCCCACTCTCAGAGACCCTGACATCAGCGTCACCTGGAGCAGAGTGGCCCAGCCTCAGACTCAGAGCACCAAGACCCAGGCCTGCAGGCCTGGACCCACCCCGGTCCCCCCGTCCCAGCTCCATTCTTCACCCCACAATCTGTAGCCCCCAGCCCTGCCCTGTGAGGCCCGGCCAGGCCCACGATGCTCCTCCTTGCTCCCCAGATGCTGAATCTGCTGCTGCTGGCGCTGCCCGTCCTGGCGAGCCGCGCCTACGCGGCCCCTGGTGAGTCCCAGCCGGGGTCCACCCTGCCCCTCACCACATTCCACAGGTCAGGGCCTGGGTGGGTTCTGGGGAGGTCGGGCTGGCCCCCACACAGGGAAGGGCTGGGCCCAGGCCTGGGGCTGCTTCCTGGTCCTGACCTGGCACCTGCCCCAGCCCCAGGCCAGGCCCTGCAGCGAGTGGGCATCGTTGGGGGTCAGGAGGCCCCCAGGAGCAAGTGGCCCTGGCAGGTGAGCCTGAGAGTCCGCGACCGATACTGGATGCACTTCTGCGGGGGCTCCCTCATCCACCCCCAGTGGGTGCTGACCGCAGCGCACTGCGTGGGACCGTGAGTCTCCCGGGGCCTGGAAGGGTGGGGAAGGGCTGGATGTGAGCCCTGGCTCCCGGGTGCTCCTGGGGGCTGCCCAGGGCCCTGAGTGGGATCCTCCGCTGCCCAGGGACGTCAAGGATCTGGCCGCCCTCAGGGTGCAACTGCGGGAGCAGCACCTCTACTACCAGGACCAGCTGCTGCCGGTCAGCAGGATCATCGTGCACCCACAGTTCTACACCGCCCAGATCGGAGCGGACATCGCCCTGCTGGAGCTGGAGGAGCCGGTGAACGTCTCCAGCCACGTCCACACGGTCACCCTGCCCCCTGCCTCAGAGACCTTCCCCCCGGGGATGCCGTGCTGGGTCACTGGCTGGGGCGATGTGGACAATGATGGTGGGTCTGGGGACAGTGGAGGTGGGGCCAGGGTCTTAGCCACAGCCCAGCCCCTGGGCTCCCTCTGGGCTCCAGGTGGGGGTTGCCCGGCCCCCTCCTGAGGCTGCACCCTCTTCCCCACCTGCAGAGCGCCTCCCACCGCCATTTCCTCTGAAGCAGGTGAAGGTCCCCATAATGGAAAACCACATTTGTGACGCAAAATACCACCTTGGCGCCTACACGGGAGACGACGTCCGCATCGTCCGTGACGACATGCTGTGTGCCGGGAACACCCGGAGGGACTCATGCCAGGTGGGCCCCGCCTGTCCCCCGCCCCCCGCCCCCCAACCCCCACTCCCAGGCCTGTTCGGCGAGCGCTGACCTCTGACCTTCCCAGGGCGACTCCGGAGGGCCCCTGGTGTGCAAGGTGAATGGCACCTGGCTGCAGGCGGGCGTGGTCAGCTGGGGCGAGGGCTGTGCCCAGCCCAACCGGCCTGGCATCTACACCCGTGTCACCTACTACTTGGACTGGATCCACCACTATGTCCCCAAAAAGCCGTGAGTCAGGCCTGGGGTGTCCACCTGGGTCACTGGAGAGCCAGCCCCTCCTGTCCAAAACACCACTGCTTCCTACCCAGGTGGCGACTGCCCCCCACACCTTCCCTGCCCCGTCCTGAGTGCCCCTTCCTGTCCTAAGCCCCCTGCTCTCTTCTGAGCCCCTTCCCCTGTCCTGAGGACCCTTCCCCATCCTGAGCCCCCTTCCCTGTCCTAAGCCTGACGCCTGCACCGGGCCCTCCGGCCCTCCCCTGCCCAGGCAGCTGGTGGTGGGCGCTAATCCTCCTGAGTGCTGGACCTCATTAAAGTGCATGGAAATCACTGGTGTGCATCGCTGTGTTTCTGGTTGTGGATGTCACTGGGAGAGAAGGGGTCCAGGTGTGCTGAGGACACCTGCCACAGTGTGAGGTCCTAGCCCTCAAGGCACAGCCAGTCACCGTGGGACGGGGCCTCCTGGGCAGCCCTGGTCCCCGAGGCTGGCTTCTCCCCACACGATGCATCCAGCATTCGGGTCACACAGAGCCACTCGGGCAACTCAGTTGATTATAAAGGACAGCCAGGTCCCTGCAACCGGGTCAAGACAGAGAATGGTCACCGGGAGCCCCAGGGCTGCCCATCACGAGCCCCTACCCCACGCTTCCCACGAGCTCTTCTCCCGGCCCCTCCGTCCACTGCTTGTGCTTTGCCTAGTTGTTTGCTTTGAGACGGGATCTCGCTGTGTCATCCAGGCTGAAGTGCAGTGGTGTGATCAGGGCTCACTGCAGCCTTAACTCCTGGGCTCAAGCGATCCTCCCATCTTGGCCTCCCATATAGCTGGGCCACAGGAGTGAGCCACCACGCCCAGTTAATTTTTGTATTTTCAGTAGAGATGGGGTTTCGCCATGTTGGCCAGTCTGGTCTCGAACTCCTGACCTCAAGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATGACAGGCGTGAGCCACCGCACCCGGCCTGAGTTTGACATTTTCAAATTCATTTTGAGGTCTTTCTCTACATCAATAGGTGAGCCCTCTGCGTCTGGCGAGTGTTGCATTTTATCCCGGGCTCTTGTTTGCATTTTATATTTGAACATGATTACACTCAGGAATGAAATGCGGGGCTGTTCTGGTTGAAAACAACTCTCTAAAGAAACATTCACTCTTTCCTTCCAACTGTTAGATGCAGAGATGTGCATTTAGTCTCCCGAATCTCTGCAAATGACCTCTGTCCTCACAAGGGGTGGACTCAACTCCCAGTGCCCTCTCCAGCCCCACGTGACCTCTGCCTCTGCAGCCCCTGAAGGCCCATCCCTCGGCTCCTGTTCTGCAGGCCCAGCGTCTTGTTAATGAAGATGGACCTGGAACTCGGGCCCTTCTTCCTCCCTCTGGCCCATCCCACCTTCTAGGGATCACAGAGACAGCACGGGGTGACCCCCAGGGAACACTGAGCCCCTAGAAGCACTTCCACACGCCCACTGGAGGTTTTGCGGGGTGGGAGTCGGAGGGATGAGACCCCGAAGGGAAGCAAGACGGCCCCTCAGGACAGGGCTGCCGGTGTAAGGAAAGGTGGACAGCAGGGGCCGGTCACTGGGTGGAGGGGGAGGGCGGGCTCCAGCCCCAGAGCTTCCCAAATTAGATCTAAGATCCCTGGGAAGCTCAGTGAAGCTCAGCCCAGTGACACTGGCAGATGTGAGCGTCAGCTTCAGCAGGAAGGGTCTCTCAGGACGTGGCAGGCAGGCTGCTGGCCAGGGCTGCAGCCACCTGCGTTTTGACTGGGACGGGGGCACCTGCTCCAAGGTCACCCACGTGGCTGCCGGCAGGAGGCCCTGGTTCCCCGTCACAGGGGGGTGTGAGGCGGAGGGCGAGTGGGGGGGACAGGGTTCCCACCGAGGGGACGGCACCCAGGTGGCCAGGCCACCGCAGACAGAAGCAATCCCAGGTCTCCCAGGGTCCTGGACAACAGGAGACCCCACCAAGCTGGGGGCAATCACCAGGGCCAGGCCCCCCTCCCGGTTCCTCAGTTGGCTCTCCTGTCCAATGGTGGGGGTGAACGGCACCATGTCACAGGACTGCTGGGGCTCAGGGGATGGTGCCTGAAGCTTCTTCCTCCCCAGCAGGCCTGCAATCTGGGTCGTGTGGAGCACTCTGCGGGGAGTGGCGTGCTGGGGCACAGGCAGAAAGACGGGGTCCCCAGTGCTGCAGGTGAATTGAGTTGGGACAGGTGAGGGCCCTGAAGTCCCCACCTGTGGGGACCTGGGGACAGCCCTAGAGGTCAGGACTAGAGGACCTGGTTCCATGAAGACCCTGCCCCTCA\n"
     ]
    }
   ],
   "source": [
    "entry_point(argv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "026bf777",
   "metadata": {},
   "outputs": [],
   "source": [
    "#####################\n",
    "# code to read FASTA file\n",
    "#####################\n",
    "def fasta_parser(args= ['../data/407228326.fasta', '../data/407228412.fasta']):\n",
    "    \n",
    "    hre=re.compile('>(\\S+)')\n",
    "    lre=re.compile('^(\\S+)$')\n",
    "    seqs_dict = {}\n",
    "    \n",
    "    for i in range(len(args)):\n",
    "        f=open(args[i],'r')\n",
    "        lines=f.readlines()\n",
    "        \n",
    "        gene = {}\n",
    "        for line in lines:\n",
    "                outh = hre.search(line)\n",
    "                if outh:\n",
    "                        id=outh.group(1)\n",
    "                else:\n",
    "                        outl=lre.search(line)\n",
    "                        if(id in gene.keys()):\n",
    "                                gene[id] += outl.group(1)\n",
    "                        else:\n",
    "                                gene[id]  =outl.group(1)\n",
    "#         print(gene)                        \n",
    "        seqs_dict[\"Seq%s\" % (i+1)] = gene[id]\n",
    "        f.close()\n",
    "    return seqs_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2685fd7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Seqn",
       " 'Seq2': 'AGAATGGCGCAGCCACTTTGGAAGACAGTTTGGCAGTTTCTTACAAAGCTAAACATACTCTTACTATATGATCTAGCAATTGTGCTTCTAGGTATTTACTTACCCAAGGAGTTGAAAACTTATGCCCACACAAAAACCTGCACATGATGTTGATAGCATCTTTACCCATAATTGCCAAAAAGTTGAAGGAACCAAAGTGTCCTTCAAAAGGCGAATGGGTAGAACAACTGTGGTACATCCAGACAATGGAATATCATTCAGAGACAAAAAGCAATGAGCTGGCCGGGTGCGGTGTCTCATGCCTGTAATCCCAGCACTTTGGGAGGCTGAGGCGGGCGGACCATGTGGTCAGGAGATTGAGACCATCCTGGCTAACACAGTGAAAACCCATCTCTAAAAAAAAAAAAAAAAAACAACAGCTGGGCATGGTGGCAGGTGCCTGTAGTCCCAGCTACTCGGAGGCTGAGGCAGGAGAATGGCGTGAACCCGGGAGGCGCAGCTTGCAGTGAGCCGAGATCACACCACTGCACTCCAGCCTAGGAGACAGAGCGAGACTCTGTCTCAAAATAAATAAATAAATAAATAAATAAATAAATAAATAAATAAATAAAAGCAAGGAGCTATCAAGCCTTGAAAAGACATACAGGGGCCATAACTGCCTACTACTCAGTGAAAGAAGCTAGTCGGAAAAAGTTAATAGTGTATCGTTGATAGTGGATAAGTCAAAACTTCAGAGACAATGAAAATATCCGTGGTTTCCAGGGGATGGGGAGAGGGAGAGGCAGTGGAGCACGAGATTTTGAGGGCAGGGGATGTATTCCGCATAATACGGTAATGGTGGACACATGACTTGTGCACTTGCCACGACCCACAGAATGTACAACAGACAGAGTGAACCCTCATGTAAACTGTGGGAGTTCGTTAGTAATAATGTATCAATATTGTTCATCAGCTGTAACAATGCACCCACAGTAATGCAAAATGTTCATAACAGGAAACTCTGTGTGTGGGGATGTGTGTGTGGGGGGATACGATCTGTACTATCTGCCCAGTTGTCTGTAAACTTAAAACTGCTCTAAAAAATAAAGTGCATTAATTCCAAAACACCACAACTTCACGTGCAATTTCAACTTGCAACAGCCTGCTTTTAGTCTCCCCGGATCCTTCTGTTACTGTAGCACACGCCGCACCCTTGTGTATTCCATAAACCACACGATACCTGCACTCGCTTTGCTGTTGTTGCTTCAAACTGCCAATTCTCTTTCAAATATTTTTTGAGAGAGAAAACTGTCTTACACAGTCACAGCTGTTTCCATTTCCAGAGTTTATCTTCCCTTAGTCTAGGTCTAGATGTTCATCTCTTATCATCTTCTTCCTGCAGAACTTCCTTTCACATTTCTTTTTTTTTTTTTTTTTTTTTTTTTTGAGACGGAGTCTCCTTCATTGCCCAGGCTGGAGTGCAGTGGCGCCATCTCGGATCACGGCAAGCTCCGCCTCCCGGGTTCACGCCATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGACTACAGGTGCCCGCCACCACGCCCGGCTAATTTTTTGTATTTTTAGTAGAGACAGGGTTTCACTGTGTTAGCCAGGGGGGTCTCGAACTCCTGACCTCAGGTGATCCACCCGCCTTGGCCTCCCGAAGTGCTAGGATTACAGGCGTGAGCCACCGCGCCCAGCTAATTTTTGTATTTTTAGTAGAGATGGGGTTTCATCACGTTGGCCAGGCTGGTCTTGAACTCCTGACCTCAGGTGACCCAGCCGCCTCGGCCTCCCAAAGTGCTAGGATTACAGGCGTGAACCACCACGCCCGAACATGATTGATTTTTTTTATCGGGAGGTCATCCTTTTTCATGCCTGCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAGACACGGTATTGCTTTGTTGCCAGACTGGAGTGCAGTGGCACGATCTCGGCTCACTGCATCCTCTGACTCCCTGGTTCAAGCGATTCTCCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCACGTGCCACCACGCCCGGCTAATTTTTATATTTTTAGTAGAGACGGGGTTTCACCATGTGGGCCAGGCTGGTCTCGTTCTCCTGACCTCACGATCTGCCACCTCGGCCTCCCAAAGTGCTGGGATGACAGGCGTGAGCCACCGCGCCCGGCCACCCGCTCGTTCTTGACTAGCCCCCGGATCTCGTGAGTACTCTCTGGAGTGTTTTGTTGCGTGCTGGGTTGTGTTCTATTCCTTGACATCGTTTTGAGATGTGTTCTCACAGGCAGTTAAGTCACTTGCAATCATTTGGATCCGTCTGGGCTTTGCTTTTCAGCTTTGTGAGGGTGGGTCCGGAGAAGCCTTTGGTTTCGGGATTACTTTCTCCCCTCGTACCCTTCCATACCCTTCCGAGGACTCTCCAGTGCCTGCCTCTGACAAGGTTTCTCCACTCAGCTGCTGGGAACACGCGATATCCCCAGCCCCGCGCGCACTCCCGGACTCCGCCCCTCTCATCTGGTGGTTCTCGTTTCCGACGCGGCTCCCACGTCTCTCTGCATCTCCGGCACTCGGCCGAGGACGCCGGGGGGAACCCCCTGCGGATGCCCGGAGCTCTCCGTGCAGTTCTCCGCCTCGTGAGTCATGGCTGCCGGGGCCTCTGCACGCGCCAGGTGCGTCTCCCCAGCCCAGCAAGCTCCTGGGGCTGAGTTTCCCATCGCTGCCCTGAGTCTGGGCGCGGCCACTGTCGTCTCACCCGACTCCCCACCCTTCTCTCGGGGACACTGCCCCACGTGGCCTCTTGCCCAGTGTCTGTCAATGGCCTGGGACCCCAGCCCTGCAGCAGCCCCAGGGGAGCGGCCGGGGATCGGGGCGGGGTGCCCAGGACGCGCCCTGATTGGCCCAGTGTTAGCCAATCAAGGCTCTCGCATCCCCATGGTGCTGATTGGTCCGCCTCCCAGGCCTGACCCAATCGGAGCATTCCTAGGAGGAGCGGCCCCAGAGCCCCTGACTCGGGGGTCCCAGAGCCCTCTGCACACCACAGCCCCGGTGTCCCCGTGTGTCCCTGGGTTCTCCCAGCCCTGGTGTCCCCTGAGTCTCTTCTTCACCGTCAGCCCTGGTGTCTCCCGTGTCCCTGCCACACCCTCATCCCTGGTGTCCCCCGTCACCCCATCCCCTCACCTCCTGGGCTCCTGAAGGTCCCATCTTGTGGGCCTCATTCATGGAACCAGGACGGGGCAGGTGGAGGCCTCTGGGGAGTTTGTCCAGAGAATGGAGGAGAAGCAGGGTCATGAGCAGGAGCGGTCTGGGCCACCCCTGCCTGTCCCCCGGGGGGTGCAGCCCGGAAGGAGTCCAGATGCATATGGCCCCGCAGTGCAGAGTCAGCCCCAAACCAGGCTGGTCCCAGGCAGGGTGGGGGCAGGAGGAGCCCTGGAGTGGCCCTGTGTTGGGGGTCGGGGGGCAGGCAGGGGGTCCTGGGGCTCAGAAGCGGAGGAGGTGGGCTGGAGGCCCCAGTGACCAACAGGCCCAGGGGAGTCAGGAGGTGGGGTGGACGGACCTGCAGGGACAGTGTCAGCGCTGAATGGGATGGAGAGCACAGGGAGCTGGGGCCGGGGGCAAGTCCACAGGGAGCTGGGGCCGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGCTGGGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGATGGGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGACCATGGGGAGCTGGGCTGGGGCTGGGACTAGTCCATGGGGAGCTGGGTCTGGAGCTGGGGGTGAGACCATGGGGAGCTGGGGCCGGGGGCTGCGACTAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGGCTGGGGCTGGGACTAGTCCATGGGCAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGCTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGGTTGGGGGTGAGTCCATGGGGAGCTGGGCTGGGTCTCCTGGGGTTGCACCTGCACTCCTGTCTGCCCTTCCCTCTGCCGATGAAGCTCAGATCCCATGATAAGGAGGCACCTGCAGACCAGGGGTCCTGCACGGACAGCCCCAGAGGTGGACATTGAGGACTCGTAGGAGGACTTGGGTCTCATACGGCGGGTGGGGAGCAGGGCCCCTTCCTGGCTGAGGACACTTGGTGCTGTCCCCTCTCAAGGCTGTTTCCCCATCTGACAAAGGGGTCTCATGTGAGCCTCCCACCAAGTGAGTCGAGGAGGGCTGGCGCCACCCCCGTGGATTCGGAGTCCGTAAGAGGGGTGTCACCCGTCATGTCCCCACCCCGTGGGCACCTTCCCGTCTCTTGGAGGGTGGCCCATGGACATGAGTTCCTCACCCCGTGTCCCTCTTGGGGAAACAGGTTTCAGGAGCGATGGGTCTTGTAGCCTGGGACAGCCAGGCCACCTGGGTGCAGCAATGCCTGAAGGCCTCCTGGCACCGAGACAGGGGCAGGAGCAGATCCCACCAGCGGGAAGGTGGTGGGTTCTAGTGCTGGGATCCACCAGCTGACAGGTGGAGCTGCCAGTCTCCAGTGCTCAGCCCTCAGCGGGGCCTGCCTGGCAGCCCCACACACAGAGGGCATCGGGGTGGCGGGGGCACGTGTTACACGGGGGCCCTGGGTCTGAGTCATCCACTTCCTCCGAGTCTGGATGGGAGGACCCAGCGCCCCTCCTCCGCCCCCTCCTGATCTGGAAGCATAAATGGGGAGGGGAGAGCCCACTGGGTAGAAGGAACAGGGAGCGGCCAGGGTAAGTCCCCACTCTCAGAGACCCTGACATCAGCGTCACCTGGAGCAGAGTGGCCCAGCCTCAGACTCAGAGCACCAAGACCCAGGCCTGCAGGCCTGGACCCACCCCGGTCCCCCCGTCCCAGCTCCATTCTTCACCCCACAATCTGTAGCCCCCAGCCCTGCCCTGTGAGGCCCGGCCAGGCCCACGATGCTCCTCCTTGCTCCCCAGATGCTGAATCTGCTGCTGCTGGCGCTGCCCGTCCTGGCGAGCCGCGCCTACGCGGCCCCTGGTGAGTCCCAGCCGGGGTCCACCCTGCCCCTCACCACATTCCACAGGTCAGGGCCTGGGTGGGTTCTGGGGAGGTCGGGCTGGCCCCCACACAGGGAAGGGCTGGGCCCAGGCCTGGGGCTGCTTCCTGGTCCTGACCTGGCACCTGCCCCAGCCCCAGGCCAGGCCCTGCAGCGAGTGGGCATCGTTGGGGGTCAGGAGGCCCCCAGGAGCAAGTGGCCCTGGCAGGTGAGCCTGAGAGTCCGCGACCGATACTGGATGCACTTCTGCGGGGGCTCCCTCATCCACCCCCAGTGGGTGCTGACCGCAGCGCACTGCGTGGGACCGTGAGTCTCCCGGGGCCTGGAAGGGTGGGGAAGGGCTGGATGTGAGCCCTGGCTCCCGGGTGCTCCTGGGGGCTGCCCAGGGCCCTGAGTGGGATCCTCCGCTGCCCAGGGACGTCAAGGATCTGGCCGCCCTCAGGGTGCAACTGCGGGAGCAGCACCTCTACTACCAGGACCAGCTGCTGCCGGTCAGCAGGATCATCGTGCACCCACAGTTCTACACCGCCCAGATCGGAGCGGACATCGCCCTGCTGGAGCTGGAGGAGCCGGTGAACGTCTCCAGCCACGTCCACACGGTCACCCTGCCCCCTGCCTCAGAGACCTTCCCCCCGGGGATGCCGTGCTGGGTCACTGGCTGGGGCGATGTGGACAATGATGGTGGGTCTGGGGACAGTGGAGGTGGGGCCAGGGTCTTAGCCACAGCCCAGCCCCTGGGCTCCCTCTGGGCTCCAGGTGGGGGTTGCCCGGCCCCCTCCTGAGGCTGCACCCTCTTCCCCACCTGCAGAGCGCCTCCCACCGCCATTTCCTCTGAAGCAGGTGAAGGTCCCCATAATGGAAAACCACATTTGTGACGCAAAATACCACCTTGGCGCCTACACGGGAGACGACGTCCGCATCGTCCGTGACGACATGCTGTGTGCCGGGAACACCCGGAGGGACTCATGCCAGGTGGGCCCCGCCTGTCCCCCGCCCCCCGCCCCCCAACCCCCACTCCCAGGCCTGTTCGGCGAGCGCTGACCTCTGACCTTCCCAGGGCGACTCCGGAGGGCCCCTGGTGTGCAAGGTGAATGGCACCTGGCTGCAGGCGGGCGTGGTCAGCTGGGGCGAGGGCTGTGCCCAGCCCAACCGGCCTGGCATCTACACCCGTGTCACCTACTACTTGGACTGGATCCACCACTATGTCCCCAAAAAGCCGTGAGTCAGGCCTGGGGTGTCCACCTGGGTCACTGGAGAGCCAGCCCCTCCTGTCCAAAACACCACTGCTTCCTACCCAGGTGGCGACTGCCCCCCACACCTTCCCTGCCCCGTCCTGAGTGCCCCTTCCTGTCCTAAGCCCCCTGCTCTCTTCTGAGCCCCTTCCCCTGTCCTGAGGACCCTTCCCCATCCTGAGCCCCCTTCCCTGTCCTAAGCCTGACGCCTGCACCGGGCCCTCCGGCCCTCCCCTGCCCAGGCAGCTGGTGGTGGGCGCTAATCCTCCTGAGTGCTGGACCTCATTAAAGTGCATGGAAATCACTGGTGTGCATCGCTGTGTTTCTGGTTGTGGATGTCACTGGGAGAGAAGGGGTCCAGGTGTGCTGAGGACACCTGCCACAGTGTGAGGTCCTAGCCCTCAAGGCACAGCCAGTCACCGTGGGACGGGGCCTCCTGGGCAGCCCTGGTCCCCGAGGCTGGCTTCTCCCCACACGATGCATCCAGCATTCGGGTCACACAGAGCCACTCGGGCAACTCAGTTGATTATAAAGGACAGCCAGGTCCCTGCAACCGGGTCAAGACAGAGAATGGTCACCGGGAGCCCCAGGGCTGCCCATCACGAGCCCCTACCCCACGCTTCCCACGAGCTCTTCTCCCGGCCCCTCCGTCCACTGCTTGTGCTTTGCCTAGTTGTTTGCTTTGAGACGGGATCTCGCTGTGTCATCCAGGCTGAAGTGCAGTGGTGTGATCAGGGCTCACTGCAGCCTTAACTCCTGGGCTCAAGCGATCCTCCCATCTTGGCCTCCCATATAGCTGGGCCACAGGAGTGAGCCACCACGCCCAGTTAATTTTTGTATTTTCAGTAGAGATGGGGTTTCGCCATGTTGGCCAGTCTGGTCTCGAACTCCTGACCTCAAGTGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATGACAGGCGTGAGCCACCGCACCCGGCCTGAGTTTGACATTTTCAAATTCATTTTGAGGTCTTTCTCTACATCAATAGGTGAGCCCTCTGCGTCTGGCGAGTGTTGCATTTTATCCCGGGCTCTTGTTTGCATTTTATATTTGAACATGATTACACTCAGGAATGAAATGCGGGGCTGTTCTGGTTGAAAACAACTCTCTAAAGAAACATTCACTCTTTCCTTCCAACTGTTAGATGCAGAGATGTGCATTTAGTCTCCCGAATCTCTGCAAATGACCTCTGTCCTCACAAGGGGTGGACTCAACTCCCAGTGCCCTCTCCAGCCCCACGTGACCTCTGCCTCTGCAGCCCCTGAAGGCCCATCCCTCGGCTCCTGTTCTGCAGGCCCAGCGTCTTGTTAATGAAGATGGACCTGGAACTCGGGCCCTTCTTCCTCCCTCTGGCCCATCCCACCTTCTAGGGATCACAGAGACAGCACGGGGTGACCCCCAGGGAACACTGAGCCCCTAGAAGCACTTCCACACGCCCACTGGAGGTTTTGCGGGGTGGGAGTCGGAGGGATGAGACCCCGAAGGGAAGCAAGACGGCCCCTCAGGACAGGGCTGCCGGTGTAAGGAAAGGTGGACAGCAGGGGCCGGTCACTGGGTGGAGGGGGAGGGCGGGCTCCAGCCCCAGAGCTTCCCAAATTAGATCTAAGATCCCTGGGAAGCTCAGTGAAGCTCAGCCCAGTGACACTGGCAGATGTGAGCGTCAGCTTCAGCAGGAAGGGTCTCTCAGGACGTGGCAGGCAGGCTGCTGGCCAGGGCTGCAGCCACCTGCGTTTTGACTGGGACGGGGGCACCTGCTCCAAGGTCACCCACGTGGCTGCCGGCAGGAGGCCCTGGTTCCCCGTCACAGGGGGGTGTGAGGCGGAGGGCGAGTGGGGGGGACAGGGTTCCCACCGAGGGGACGGCACCCAGGTGGCCAGGCCACCGCAGACAGAAGCAATCCCAGGTCTCCCAGGGTCCTGGACAACAGGAGACCCCACCAAGCTGGGGGCAATCACCAGGGCCAGGCCCCCCTCCCGGTTCCTCAGTTGGCTCTCCTGTCCAATGGTGGGGGTGAACGGCACCATGTCACAGGACTGCTGGGGCTCAGGGGATGGTGCCTGAAGCTTCTTCCTCCCCAGCAGGCCTGCAATCTGGGTCGTGTGGAGCACTCTGCGGGGAGTGGCGTGCTGGGGCACAGGCAGAAAGACGGGGTCCCCAGTGCTGCAGGTGAATTGAGTTGGGACAGGTGAGGGCCCTGAAGTCCCCACCTGTGGGGACCTGGGGACAGCCCTAGAGGTCAGGACTAGAGGACCTGGTTCCATGAAGACCCTGCCCCTCA'}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fasta_parser()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "100ec46f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

**********************************************************************

Testing align_seqs_better.ipynb...

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: debugme.py

"""Function to debugme"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'
def buggyfunc(x):
    """
    Des:
    	To debug the function
    Arg:
    	x
    Return:
    	different bug results
    """
    y = x
    for i in range(x):
        try: 
            y = y-1
            z = x/y
        except ZeroDivisionError:
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This didn't work;{x = }; {y = }")
        else:
            print(f"OK; {x = }; {y = }, {z = };")
    return z

buggyfunc(20)

**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
OK; x = 20; y = 19, z = 1.0526315789473684;
OK; x = 20; y = 18, z = 1.1111111111111112;
OK; x = 20; y = 17, z = 1.1764705882352942;
OK; x = 20; y = 16, z = 1.25;
OK; x = 20; y = 15, z = 1.3333333333333333;
OK; x = 20; y = 14, z = 1.4285714285714286;
OK; x = 20; y = 13, z = 1.5384615384615385;
OK; x = 20; y = 12, z = 1.6666666666666667;
OK; x = 20; y = 11, z = 1.8181818181818181;
OK; x = 20; y = 10, z = 2.0;
OK; x = 20; y = 9, z = 2.2222222222222223;
OK; x = 20; y = 8, z = 2.5;
OK; x = 20; y = 7, 
**********************************************************************

Code ran without errors

Time consumed = 0.02711s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: lc2.py
"""Function to lc2"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.

__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
"""
    Des:
    	An exercise for list

    Return:
    	lists for new_list
    """
new_list = [i for i in rainfall if i[1]>100]
print(new_list)

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 
"""
    Des:
    	An exercise for list

    Return:
    	lists for month_names
    """
month_names = [i[0] for i in rainfall if i[1]<50]
print(month_names)

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 
"""
    Des:
    	An exercise for list

    Return:
    	lists for new_list, month_names
    """
new_list = []
for i in rainfall:
    if i[1]>100:
        new_list.append(i)
print(new_list)

month_names = []
for i in rainfall:
    if i[1]<50:
        month_names.append(i[0])
print(month_names)
# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

Found too many docstrings.  Check your script.

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.02494s

======================================================================
Inspecting script file PP_regress_loc.R...

File contents are:

**********************************************************************
# Cleaning the environment
rm(list = ls())

# Loading the required packages
library(tidyverse)

# Loading the data as MyDF
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Converting the Prey mass to grams 
MyDF$Prey.mass[MyDF$Prey.mass.unit == 'mg'] <- 
    MyDF$Prey.mass[MyDF$Prey.mass.unit == 'mg']/1000

# Creating a dataframe of required columns only
new <- MyDF %>% select(Prey.mass, Predator.mass, 
                       Type.of.feeding.interaction, Predator.lifestage,
                       Location)

# Creating an empty data frame
new_df <- data.frame(Type.of.feeding.interaction = character(),
                     Predator.lifestage = character(),
                     Location = character(),
                     Regression.slope = double(), 
                     Regression.intercept = double(), 
                     R.squared = double(), 
                     F.statistic = double(),
                     p.value = double())

# Fitting linear regressions subset-wise and saving the required values to the 
# initialized dataframe

for(inter in unique(new$Type.of.feeding.interaction)){
    for(lifestage in unique(new$Predator.lifestage)){
        for(loc in unique(new$Location)){
            tmp <- new %>%
                filter(Type.of.feeding.interaction == inter,
                       Predator.lifestage == lifestage,
                       Location == loc)
            if(nrow(tmp) > 2){ # Only fitting regression if there are more than 2 observations
                mod <- lm(log10(Predator.mass)~log10(Prey.mass), data = tmp)
                tmp1 <- summary(mod)
                needed <- c(tmp1$coefficients[2,1],
                            tmp1$coefficients[1,1],
                            tmp1$adj.r.squared, 
                            tmp1$fstatistic[1], 
                            tmp1$coefficients[,4][2])
                new_df[nrow(new_df)+1,] <- c(inter, lifestage, loc, needed)
            }
        }
    }
}


# Writing the data frame to a results file
write.csv(new_df, file = '../results/PP_Regress_Results.csv', row.names = F)

**********************************************************************

Testing PP_regress_loc.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

â”€â”€ Attaching packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.0 â”€â”€
âœ” ggplot2 3.3.6     âœ” purrr   0.3.4
âœ” tibble  3.1.1     âœ” dplyr   1.0.6
âœ” tidyr   1.1.3     âœ” stringr 1.4.0
âœ” readr   1.4.0     âœ” forcats 0.5.0
â”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€
âœ– dplyr::filter() masks stats::filter()
âœ– dplyr::lag()    masks stats::lag()
Error in file(file, "rt") : cannot open the connection
Calls: read.csv -> read.table -> file
In addition: Warning message:
In file(file, "rt") :
  cannot open file '../data/EcolArchives-E089-51-D1.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file align_seqs_fasta.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script to align two sequences after taking an input from user.
If no input is provided the script will run with default arguements.
"""

__author__ = 'Aditi Madkaiakr (arm122@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'



import sys
import csv
import re

# Main entry point of the script. 
def entry_point(argv='abc'):
    """
    The main entry function of the script. Takes arguements from the system or user. 
    When called independently, it will work only with names of two fasta files are arguements. 
    Else it will continue with defaults
    """
    if len(argv) != 3:
        print("Too few or too many arguements...")
        print("Continuing with defaults..")
        seq1, seq2 = fasta_parser().values()
    else:
        try:
            arg1 = argv[1]
            arg2 = argv[2]
            re.search(r'\w+\.fasta\s\w+\.fasta', arg1 + " " + arg2).group()
            print("Good arguements given. Will continue with these.")
            seq1, seq2 = fasta_parser().values()
        except:
            print("Going back to defaults since wrong input was given")
            seq1, seq2 = fasta_parser().values()
    req = seq_order(seq1, seq2)
    
    return 0


#####################
# code to read FASTA file
#####################
def fasta_parser(args= ['../data/407228326.fasta', '../data/407228412.fasta']):
    """ 
    This is a Fasta parser. Parses Fasta files and returns a dictionary of parsed files.
    This function can take any number of inputs. If none are given it will proceed with defaults.
    """
    hre=re.compile('>(\S+)')
    lre=re.compile('^(\S+)$')
    seqs_dict = {}
    
    for i in range(len(args)):
        f=open(args[i],'r')
        lines=f.readlines()
        
        gene = {}
        for line in lines:
                outh = hre.search(line)
                if outh:
                        id=outh.group(1)
                else:
                        outl=lre.search(line)
                        if(id in gene.keys()):
                                gene[id] += outl.group(1)
                        else:
                                gene[id]  =outl.group(1)
        seqs_dict["Seq%s" % (i+1)] = gene[id]
        f.close()
    return seqs_dict

# Function to calcualte score at every point
def calculate_score(s1='ATCGA', s2='ATCG', l1=5, l2=4, startpoint=0):
    """
    This function calculates the best source when s1, s2, l1, l2 and the startpoint are provided. 
    It aligns the shorter sequence at the startpoint location of the longer sequence and calculates the number of matching base pairs
    If you want to import this function as a module, assign the longer sequence s1, and the shorter to s2. 
    l1 is length of the longest, l2 that of the shortest.
    It has default arguements.
    """
    
    matched = "" # to hold string displaying alignements
    score = 0
    #import ipdb; ipdb.set_trace()
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"
    return score

# Function to order the given sequences by length
def seq_order(seq1='ATCG', seq2='ATCGA'):
    """
    Orders sequences in terms based on their lengths. 
    It takes two arguements and returns the ordered sequences and their lengths. 
    """
    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths
    
    if __name__ == '__main__':
        my_best_align = None
        my_best_score = -1

        for i in range(l1): # Note that you just take the last alignment with the highest score
            z = calculate_score(s1, s2, l1, l2, i)
            if z > my_best_score:
                my_best_align = "." * i + s1 # think about what this is doing!
                my_best_score = z 

        list_to_save = [my_best_align, s1, 'Best score: ', my_best_score]

        f = open('../results/best_align.txt', 'w+')
        for i in list_to_save:
            f.write(str(i) + '\n')
        f.close() 
    else:
        choice = input("Do you want to continue to calculating alignment score? [y/n]")
        print("Thie choice you made is", choice)
        
        if choice.lower() == "y":
            my_best_align = None
            my_best_score = -1

            for i in range(l1): # Note that you just take the last alignment with the highest score
                z = calculate_score(s1, s2, l1, l2, i)
                if z > my_best_score:
                    my_best_align = "." * i + s1 # think about what this is doing!
                    my_best_score = z 
            return my_best_align, s1, my_best_score

        else:
            return "The ordered sequences and their lengths are:", s1, s2, l1, l2
    return 0

# Main thingy
if __name__ == '__main__':
    """Makes sure the main function is called from the command line"""
    status = entry_point(sys.argv)
    sys.exit(status)

**********************************************************************

Testing align_seqs_fasta.py...

align_seqs_fasta.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
Too few or too many arguements...
Continuing with defaults..

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/align_seqs_fasta.py", line 151, in <module>
    status = entry_point(sys.argv)
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/align_seqs_fasta.py", line 28, in entry_point
    seq1, seq2 = fasta_parser().values()
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/align_seqs_fasta.py", line 57, in fasta_parser
    f=open(args[i],'r')
FileNotFoundError: [Errno 2] No such file or directory: '../data/407228326.fasta'

======================================================================
Inspecting script file FloridaYears.tex...

File contents are:

**********************************************************************
\documentclass{article}
\usepackage[utf8]{inputenc}

\title{Are temperatures of one year significantly correlated with the next year (successive years), across years in a given location?}
\author{CMEE Group 3 }
\date{December 2022}

\begin{document}

\maketitle

\section{Introduction}
There is significant evidence to assume that the temperature of Florida has been increasing over the years 1901 - 2000, and we wish to determine whether there is also a significant correlation between temperature over the successive years themselves.

\section{Method}
Under the assumption that temperature, the dependant variable is normally distributed, a  two tailed t-test was performed to determine an estimation for the correlation between temperatures across successive years. 

Since observations of the dependent variable (time) are not independent of each-other, a 2 tailed hypothesis test was performed with significance level $\alpha = 0.01$ and with the following null ($H_0$) and alternative ($H_A$) hypotheses, where $r$ is the true correlation, and $r_{observed}$ is the correlation observed within the data.
 \[ H_0: | r | <  r_{observed}\]
    \[H_A: |r| \geq r_{observed} \]

The measurements of temperature were permuted and assigned to years randomly for 10 000 trials. For each trial a paired sample t-test was performed on the newly generated data points and the corresponding correlation was recorded. This calculation was then compared with the correlation calculated for the true data, to investigate how likely a correlation as strong as the one observed is to occur within meaningless data.


\section{Results}
The paired sample t-test performed on the first 99 years and their successive years gave an estimated correlation of 0.3261697.

The correlations calculated for the randomly assigned temperature measurements were greater than 0.3261697 (or less than -0.3261697) for only 0.079\% of the trials. This gives an estimated p-value of 0.00079, which is substantially smaller than the significance level $\alpha$.

Therefore, we can reject $H_0$ and conclude that at a 1\% significance level, the data provides significant evidence that the temperature of Florida is positively correlated across successive years.

\end{document}

**********************************************************************

Testing FloridaYears.tex...

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """
    Des:
    	Find whether a number x is even or odd.
    Arg:
    	x
    Return:
    	Odd or Even
    """
    if x % 2 == 0: #The conditional if
        return f"{x} is Even!"
    return f"{x} is Odd!"

def largest_divisor_five(x=120):
    
    """
    Des:
    	Find which is the largest divisor of x among 2,3,4,5.
    Arg:
    	x
    Return:
    	Each function can return a value or a variable
    """
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return f"No divisor found for {x}!" # Each function can return a value or a variable.
    return f"The largest divisor of {x} is {largest}"

def is_prime(x=70):
    """
    Des:
    	Find whether an integer is prime
    Arg:
    	x
    Return:
    	Each function can return a value or a variable
    """
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
            print(f"{x} is not a prime: {i} is a divisor") 
            return False
    print(f"{x} is a prime!")
    return True 

def find_all_primes(x=22):
    """
    Des:
    	Find all the primes up to x
    Arg:
    	x
    Return:
    	Each function can return a value or a variable
    """
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print(f"There are {len(allprimes)} primes between 2 and {x}")
    return allprimes
      
def main(argv):
    """
    Des:
    	The main function to run all the functions
    Arg:
    	argv
    Return:
    	0
    """
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.02577s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: loops.py
"""Function to loops"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.

__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'

"""
    Des:
    	An exercise for loops

    Return:
    	results
    """
    
# FOR loops
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loop
z = 0
while z < 100:
    z = z + 1
    print(z)

**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 98

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

**********************************************************************

Code ran without errors

Time consumed = 0.02783s

======================================================================
Inspecting script file cfexercise2.py...

File contents are:

**********************************************************************
########################
def hello_1(x):
  """
    Des:
	Function to print hello when 3x
    Arg:
    	x
    Return:
  	hello
  """
    for j in range(x):
        if j % 3 == 0:
            print('hello')
    print(' ')

hello_1(12)

########################
def hello_2(x):
  """
    Des:
	Function to print hello 
    Arg:
    	x
    Return:
  	hello
  """
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')

hello_2(12)

########################
def hello_3(x, y):
  """
    Des:
	Function to print hello when
    Arg:
    	x
    Return:
  	hello
  """
    for i in range(x, y):
        print('hello')
    print(' ')

hello_3(3, 17)

########################
def hello_4(x):
  """
    Des:
	Function to print hello when
    Arg:
    	x
    Return:
  	hello
  """
    while x != 15:
        print('hello')
        x = x + 3
    print(' ')

hello_4(0)

########################
def hello_5(x):
  """
    Des:
	Function to print hello when
    Arg:
    	x
    Return:
  	hello
  """
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print('hello')
        x = x + 1
    print(' ')

hello_5(12)

# WHILE loop with BREAK
def hello_6(x, y):
  """
    Des:
	Function to print hello when
    Arg:
    	x,y
    Return:
  	hello
  """
    while x: # while x is True
        print("hello! " + str(y))
        y += 1 # increment y by 1 
        if y == 6:
            break
    print(' ')

hello_6 (True, 0)

**********************************************************************

Testing cfexercise2.py...

cfexercise2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 97.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/cfexercise2.py", line 11
    for j in range(x):
IndentationError: unexpected indent

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#############################
# STORING OBJECTS
#############################
"""
  Des:
	To save an object (even complex) for later use
  Return:
  	testp.p
"""
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)


**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 97.5

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.02307s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: oaks.py
"""Function to oaks"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.

__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'

## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
"""
    Des:
    	A function to test if it is oak
    Arg:
        name
    Return:
    	results
    """
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)

**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 97.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/oaks.py", line 20
    """
    ^
IndentationError: expected an indented block after function definition on line 19

======================================================================
Inspecting script file align_seqs_better.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script to align two sequences after taking an input from user.
If no input is provided the script will run with default arguements.
All individual functions can work independently!
Ejoy!
"""

__author__ = 'Aditi Madkaiakr (arm122@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'



import sys
import csv
import re
import pickle 

# Main entry point of the script. 
def entry_point(argv='abc'):
    """
    The main entry function of the script. Takes arguements from the system or user. 
    When called independently, it will work only with names of two fasta files are arguements. 
    Else it will continue with defaults
    """
    if len(argv) != 3:
        print("Too few or too many arguements...")
        print("Continuing with defaults..")
        seq1, seq2 = fasta_parser().values()
    else:
        try:
            arg1 = argv[1]
            arg2 = argv[2]
            re.search(r'\w+\.fasta\s\w+\.fasta', arg1 + " " + arg2).group()
            print("Good arguements given. Will continue with these.")
            seq1, seq2 = fasta_parser().values()
        except:
            print("Going back to defaults since wrong input was given")
            seq1, seq2 = fasta_parser().values()
    req = seq_order(seq1, seq2)
    
    return 0


#####################
# code to read FASTA file
#####################
def fasta_parser(args= ['../data/407228326.fasta', '../data/407228412.fasta']):
    """ 
    This is a Fasta parser. Parses Fasta files and returns a dictionary of parsed files.
    This function can take any number of inputs. If none are given it will proceed with defaults.
    """
    hre=re.compile('>(\S+)')
    lre=re.compile('^(\S+)$')
    seqs_dict = {}
    
    for i in range(len(args)):
        f=open(args[i],'r')
        lines=f.readlines()
        
        gene = {}
        for line in lines:
                outh = hre.search(line)
                if outh:
                        id=outh.group(1)
                else:
                        outl=lre.search(line)
                        if(id in gene.keys()):
                                gene[id] += outl.group(1)
                        else:
                                gene[id]  =outl.group(1)
        seqs_dict["Seq%s" % (i+1)] = gene[id]
        f.close()
    return seqs_dict

# Function to calcualte score at every point
def calculate_score(s1='ATCGA', s2='ATCG', l1=5, l2=4, startpoint=0):
    """
    This function calculates the best source when s1, s2, l1, l2 and the startpoint are provided. 
    It aligns the shorter sequence at the startpoint location of the longer sequence and calculates the number of matching base pairs
    If you want to import this function as a module, assign the longer sequence s1, and the shorter to s2. 
    l1 is length of the longest, l2 that of the shortest.
    It has default arguements.
    """
    
    matched = "" # to hold string displaying alignements
    score = 0
    #import ipdb; ipdb.set_trace()
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"
    return score

# Function to order the given sequences by length
def seq_order(seq1='ATCG', seq2='ATCGA'):
    """
    Orders sequences in terms based on their lengths. 
    It takes two arguements and returns the ordered sequences and their lengths. 
    """
    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths
    
    if __name__ == '__main__':
        my_best_align = None
        my_best_score = -1
        dict_to_save = dict()

        for i in range(l1): # Note that you just take the last alignment with the highest score
            z = calculate_score(s1, s2, l1, l2, i)
            if z >= my_best_score:
                my_best_align = "." * i + s1 # think about what this is doing!
                my_best_score = z
                num = i  
                list_to_save = [my_best_align, s1, 'Best score: ', my_best_score]
            dict_to_save[num] = list_to_save

        f = open('../results/better_aligned_seqs.p', 'wb')
        pickle.dump(dict_to_save, f)
        f.close()

    else:
        choice = input("Do you want to continue to calculating alignment score? [y/n]")
        print("Thie choice you made is", choice)
        
        if choice.lower() == "y":
            my_best_align = None
            my_best_score = -1
            dict_to_save = dict()
   
            for i in range(l1): # Note that you just take the last alignment with the highest score
                z = calculate_score(s1, s2, l1, l2, i)
                if z > my_best_score:
                    my_best_align = "." * i + s1 # think about what this is doing!
                    my_best_score = z 
                    num = i
                    list_to_save = [my_best_align, s1, 'Best score: ', my_best_score]
                dict_to_save[num] = list_to_save
            return dict_to_save
        else:
            return "The ordered sequences and their lengths are:", s1, s2, l1, l2
    return 0

# Main thingy
if __name__ == '__main__':
    """Makes sure the main function is called from the command line"""
    status = entry_point(sys.argv)
    sys.exit(status)

**********************************************************************

Testing align_seqs_better.py...

align_seqs_better.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 97.5

Output (only first 500 characters): 


**********************************************************************
Too few or too many arguements...
Continuing with defaults..

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/align_seqs_better.py", line 159, in <module>
    status = entry_point(sys.argv)
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/align_seqs_better.py", line 31, in entry_point
    seq1, seq2 = fasta_parser().values()
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/align_seqs_better.py", line 60, in fasta_parser
    f=open(args[i],'r')
FileNotFoundError: [Errno 2] No such file or directory: '../data/407228326.fasta'

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
"""takes the DNA sequences as an input from a single external file
and saves the best alignment along with its corresponding score in a single text file."""

__appname__ = 'align_seqs.py'
__author__ = 'shengge.tong22@imperial.ac.uk'
__version__= '0.0.1'

import csv
import sys

def read_csv(): #read the sequence
    """
    Returns:
    	Two sequences seq1,seq2
    	
    Des:
    	Read the seq csv
    """
    with open('../data/example_seq.csv','r') as r:
        seq_list = []
        seq = csv.reader(r)
        for i in seq:
            seq_list.append(i[1])
        seq1 = seq_list[0]
        seq2 = seq_list[1]
    return seq1,seq2


# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest
def sequence_length(seq1,seq2):
    """
    Des:
    	Compare the sequence length for later calculation
    	
    Returns:
    	return seq1,seq2 and the lenth l1,l2
    """
    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths
    return s1, s2, l1, l2


# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    """
    Des:
    	A function that computes a score by returning the number of matches starting
    	
    Arguments:
    	s1,s2,l1,l2,startpoint

    Return:
    	Score 
    """
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
def best_align(s1, s2, l1, l2):
    """
    Des:
    	A function that find the best match (highest score) for the two sequences
    	
    Arguments:
    	s1,s2,l1,l2

    Return:
    	my_best_align,my_best_score
    """
    my_best_align = None
    my_best_score = -1

    for i in range(l1): # Note that you just take the last alignment with the highest score
        z = calculate_score(s1, s2, l1, l2, i)
        if z > my_best_score:
            my_best_align = "." * i + s2 # think about what this is doing!
            my_best_score = z 
    print(my_best_align)
    print(s1)
    print("Best score:", my_best_score)

    return my_best_align,my_best_score


def result(my_best_align, my_best_score): 

    """
    Des:
    	Output the result into txt file
    	
    Arguments:
    	s1,s2,l1,l2

    Return:
    	align_result.txt
    """
    result = open('../results/align_result.txt','w') 
    result.write('Best alignment:' + str(my_best_align) + '\n')
    result.write('Best score:' + str(my_best_score) + '\n')
    result.close()
    return 0

def main(argv): #Makes sure the "main" function is called from command line
    """ 
    Main process running the program.
    """ 
    seq1, seq2 = read_csv()
    s1, s2, l1, l2 = sequence_length(seq1, seq2)
    my_best_align, my_best_score = best_align(s1, s2, l1, l2)
    result(my_best_align, my_best_score)
    return 0

if __name__ == "__main__": 
    
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 97.5

Output (only first 500 characters): 


**********************************************************************
seq2
ATCGCCGGATTACGGG
Best score: 0

**********************************************************************

Code ran without errors

Time consumed = 0.02544s

======================================================================
Inspecting script file get_TreeHeight.R...

File contents are:

**********************************************************************
#!/usr/bin/env Rscript

# loading the packages
library(tools)

# loading data from the command line
argv <- commandArgs(trailingOnly = TRUE)
treedata <- read.csv(paste("../data/", argv[1], sep = ""))

TreeHeight <- function(degrees, distance) {

    radians <- degrees * pi / 180
    height <- distance * tan(radians)

    return(height)
}

for (Species in treedata) {
    treehgt <- TreeHeight(treedata$Angle.degrees, treedata$Distance.m)
    return(treehgt)
} 

## add the column of height to the data
treedata$Tree.Height.m <- treehgt

## select the first two rows of data
height_selected <- treedata[1:2,]
height_selected$Input_Name <- argv[1]

## saving the output file
output <- basename(file_path_sans_ext(argv[1]))
write.csv(height_selected, file = paste("../results/", output, "_treeheights.csv", sep = ""))
**********************************************************************

Testing get_TreeHeight.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in file(file, "rt") : cannot open the connection
Calls: read.csv -> read.table -> file
In addition: Warning message:
In file(file, "rt") :
  cannot open file '../data/NA': No such file or directory
Execution halted

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: dictionary.py

"""Function to dictionary"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc.
#  OR,
# 'Chiroptera': {'Myotis lucifugus'} ... etc

    """
    Des:
    	An exercise for dictionary

    Return:
    	A new dictionary
    """
taxa_dic = {}
for i in taxa:
        taxa_dic.setdefault(i[1],set()).add(i[0])
print(taxa_dic)

**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 95.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/dictionary.py", line 31
    """
IndentationError: unexpected indent

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: test_control_flow.py

"""Some functions exemplifying the use of control statements"""

__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'

import sys
import doctest

def even_or_odd(x=0):
    """Find whether a number x is even or odd.
      
    >>> even_or_odd(10)
    '10 is Even!'
    
    >>> even_or_odd(5)
    '5 is Odd!'
        
    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'
    
    """
    #Define function to be tested
    if x % 2 == 0:
        return f"{x} is Even!"
    return f"{x} is Odd!"

def main(argv):
	"""The main function to run"""
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()

**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 95.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/test_control_flow.py", line 33
    print(even_or_odd(22))
                          ^
IndentationError: unindent does not match any outer indentation level

======================================================================
Inspecting script file oaks_debugme_groupwork.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""This script checks whether the TestOaksData.csv input file contains a header,
prints tree species and saves only the oak species"""

__author__ = "__Group3__"

import csv
import sys
import doctest

#Define function
def is_an_oak(name):
    """ Returns True if name starts with 'quercus' and is followed by a space.

    >>> is_an_oak("Fagus sylvatica")
    False

    >>> is_an_oak("Quercuss ilex")
    False

    >>> is_an_oak("Quercus Ilex")
    True

    >>> is_an_oak("QUERCUS ILEX")
    True

    >>> is_an_oak("quercus ilex")    
    True
    """

    return name.lower().startswith('quercus ')

### Checking whether the dataset contains any oak species (species are given in latin)
def main(argv): 
    """ main entry pointry of the script"""
    f = open('../data/TestOaksData.csv','r')
    g = open('../results/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    
    csvwrite.writerow(["Genus", "Species"]) ### Adding column headers to the output list
    
    for row in taxa:
        if row[0].lower().startswith('genus'): ### Checking whether the input file contains header 
            continue
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0] + " "):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod() 
**********************************************************************

Testing oaks_debugme_groupwork.py...

oaks_debugme_groupwork.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 95.5

Output (only first 500 characters): 


**********************************************************************
['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.05681s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: sysargv.py
"""Function to sysargv"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.

__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'

import sys
"""
    Des:
    	The function for sysargv
    Arg:
	argv
    Return:
    	0
    """
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: " , str(sys.argv))

**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.02541s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: tuple.py

"""Some functions exemplifying the use of control statements"""

__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis
# Common name: Savannah sparrow
# Mass: 18.7
# ... etc.

# Hints: use the "print" command! You can use list comprehensions!

[print("Latin name:", a, "\n", "Common name:", b,"\n","Mass:", c, "\n") for (a,b,c) in birds]

**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
Latin name: Passerculus sandwichensis 
 Common name: Savannah sparrow 
 Mass: 18.7 

Latin name: Delichon urbica 
 Common name: House martin 
 Mass: 19 

Latin name: Junco phaeonotus 
 Common name: Yellow-eyed junco 
 Mass: 19.5 

Latin name: Junco hyemalis 
 Common name: Dark-eyed junco 
 Mass: 19.6 

Latin name: Tachycineata bicolor 
 Common name: Tree swallow 
 Mass: 20.2 


**********************************************************************

Code ran without errors

Time consumed = 0.02337s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
Script to align two sequences after taking an input from user.
If no input is provided the script will run with default arguements.
"""

__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')

"""
use "implicit" for loop:
if the object is a file, python will cycle over lines
"""
for line in f:
    print(line)

# close the file
f.close()


"""
Same example, skip blank lines
"""
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()


#############################
# FILE INPUT
#############################
# Open a file for reading
with open('../sandbox/test.txt', 'r') as f:
    # use "implicit" for loop:
    # if the object is a file, python will cycle over lines
    for line in f:
        print(line)
        
"""
Once you drop out of the with, the file is automatically closed
"""
 
# Same example, skip blank lines
with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        if len(line.strip()) > 0:
            print(line)

**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

Found too many docstrings.  Check your script.

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
First Line

Second Line



Third Line



Fourth Line

First Line

Second Line

Third Line

Fourth Line

First Line

Second Line



Third Line



Fourth Line

First Line

Second Line

Third Line

Fourth Line


**********************************************************************

Code ran without errors

Time consumed = 0.02670s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)
"""
  Des:
	Save the elements of a list to a file
  Return:
  	testout.txt
"""
f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()

**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.03279s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines"""

__appname__ = 'boilerplate.py'
__author__ = 'shengge.tong22@imperial.ac.uk'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ 
    Des:
    	Main entry point of the program 
    	
    Return:
    	none
    """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.02715s

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""
Auther: shengge.tong22@imperial.ac.uk
Script: MyExampleScript.py
Date: Oct, 2022
"""
def foo(x):
"""
    Des:
    	An exercise for example script
    Arg:
	x
    Return:
    	number
    """
    
    x *= x # same as x = x*x
    print(x)

foo(2)

**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/MyExampleScript.py", line 8
    """
    ^
IndentationError: expected an indented block after function definition on line 7

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: lc1.py
"""Function to lc1"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.

__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 
    """
    Des:
    	An exercise for list

    Return:
    	lists for Latin_names, Common_names, Mean_body_masses
    """
Latin_names = [i[0] for i in birds]
Common_names = [i[1] for i in birds]
Mean_body_masses = [i[2] for i in birds]

print(Latin_names)
print(Common_names)
print(Mean_body_masses)

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 
    """
    Des:
    	An exercise for list

    Return:
    	lists for Latin_names, Common_names, Mean_body_masses
    """
list_birds = list(birds)

latin_names = []
for i in list_birds:
    latin_names.append(i[0])
print(latin_names)

common_names = []
for i in list_birds:
    common_names.append(i[1])
print(common_names)

mean_body_masses = []
for i in list_birds:
    mean_body_masses.append(i[2])
print(mean_body_masses)

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.






**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found too many docstrings.  Check your script.

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/lc1.py", line 20
    """
IndentationError: unexpected indent

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
"""
Read and write files
"""

__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = 'None'

import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
with open('../data/testcsv.csv','r') as f:
    """
    Read the csv
    """
    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and Body mass
with open('../data/testcsv.csv','r') as f:
    with open('../data/bodymass.csv','w') as g:
    """
    write a file containing only species name and Body mass
    """
        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])


**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

Found too many docstrings.  Check your script.

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/basic_csv.py", line 28
    """
    ^
IndentationError: expected an indented block after 'with' statement on line 27

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: oaks_debugme.py
"""Function to oaks_debugme.py"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.

__author__ = 'Shengge Tong (shengge.tong22@imperial.ac.uk)'
__version__ = '0.0.1'

import csv
import sys

#Define function
def is_an_oak(name):
    """ Returns True if name is starts with 'quercus' 
    >>> is_an_oak("Quercus")
    True
    >>> is_an_oak("Fraxinus")
    False
    >>> is_an_oak("Pinus")
    False
    >>> is_an_oak("Quercuss")
    False
    >>> is_an_oak("Quercuss Quercus")
    False
    >>> is_an_oak("quercus")
    True
    >>> is_an_oak("quercus petraea")
    True
    >>> is_an_oak('QuercusPetraea')
    True
    """
    return name.lower().startswith('quercs')

def main(argv): 
"""
    Des:
    	The main function to run all the functions
    Arg:
	argv
    Return:
    	0
    """
    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week2/code/oaks_debugme.py", line 36
    """
    ^
IndentationError: expected an indented block after function definition on line 35

======================================================================
======================================================================
Finished running scripts

Ran into 14 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 93.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!