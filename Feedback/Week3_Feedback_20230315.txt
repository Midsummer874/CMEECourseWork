Starting code feedback for Shengge, Week3

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 4.98 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, MiniProject, week6, week7, week4, week3, week2, Feedback, HPC, week1, week5

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp 
.RData 
.Rhistory

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Shengge Tongâ€˜s CMEECoursework Repository

## Brief description: 
This folder conatins a set of scripts in weeks 1,2,3,4,5,6,7.

## Installation

```
git clone https://github.com/Midsummer874/CMEECourseWork.git
```


## Languages: 
Python 3.10.6, R 4.1.2, bash, shell,  LaTex

## Dependencies: 
Dependencies are listed in weekly folders.

## Project structure and Usage: 

### week 1

### week 2

### week 3

### week 4

### week 5

### week 6

### week 7

### MiniProject

### Feedback

### HPC



## Author name and contact

**Shengge Tong**

shengge.tong22@imperial.ac.uk

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 7 weekly directories: week1, week2, week3, week4, week5, week6, week7

The Week3 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK3...

Found the following directories: code, sandbox, results, data

Found the following files: README.md, .gitignore

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEECoursework: Week 3

## Contents

- **Description**
- **Languages**
- **Dependencies**
- **Installation**
- **Project structure**
- **Author name and Contact**

## Description
- **R**

Learned from [The Multilingual Quantitative Biologist](https://mhasoba.github.io/TheMulQuaBio/intro.html) 

## Languages

R

## Dependencies

os - used to split the string of input and eliminate the extension in R
tidyverse - for selecting data and subsetting

## Installation

```
git clone https://github.com/Midsummer874/CMEECourseWork.git
```

## Project structure and Usage 

- **CMEECourseWork/week3**

  - It contains 4 folders(code, data, results, sandbox) and 1 readme file.

- **CMEECourseWork/week3/data**

  - It contains data files.

- **CMEECourseWork/week3/sandbox**

  - It contains several test files.

- **CMEECourseWork/week3/code**

  - ***apply1.R:*** 

  - ***apply2.R:*** 

  - ***basic_io.R:*** 

  - ***boilerplate.R:*** 

  - ***break.R:*** 

  - ***browse.R:*** 

  - ***control_flow.R:*** 

  - ***DataWrang.R:*** 

  - ***DataWrangTidy.R:*** 

  - ***Florida.R:*** 

  - ***Florida.tex:*** 

  - ***Girko.R:*** 

  - ***GPDD_Data.R:***

  - ***MyBars.R:***

  - ***next.R***

  - ***plotLin.R:***

  - ***PP_Dists.R:***

  - ***PP_Regress.R:***

  - ***preallocate.R:***
  
  - ***R_conditionals.R:***
  
  - ***Riker.R:***
  
  - ***sample.R:***
  
  - ***SQLinR.R:***
  
  - ***TreeHeight.R:***
  
  - ***try.R:***
  
  - ***Vectorize1.R:***
  
  - ***Vectorize2.R:***

## Author name and contact

**Shengge Tong**

shengge.tong22@imperial.ac.uk

**********************************************************************

Results directory is empty - good! 

Found 33 code files: apply2.R, apply1.R, Girko.R, next.R, plotLin.R, Florida.R, sample.R, PP_Dists.R, get_TreeHeight.py, SQLinR.R, try.R, PP_regress_loc.R, FloridaYears.tex, MyBars.R, control_flow.R, TAutoCorr.R, Ricker.R, boilerplate.R, R_conditionals.R, browse.R, GPDD_Data.R, PP_Regress.R, get_TreeHeight.R, Vectorize2.R, DataWrangTidy.R, preallocate.R, break.R, run_get_TreeHeight.sh, DataWrang.R, Florida.tex, TreeHeight.R, basic_io.R, Vectorize1.R

======================================================================
Testing script/code files...

======================================================================
Inspecting script file apply2.R...

File contents are:

**********************************************************************
SomeOperation <- function(v) { # (What does this function do?)
  if (sum(v) > 0) { #note that sum(v) is a single (scalar) value
    return (v * 100)
  } else { 
    return (v)
  }
}

M <- matrix(rnorm(100), 10, 10)
print (apply(M, 1, SomeOperation))
**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 


**********************************************************************
            [,1]        [,2]       [,3]       [,4]       [,5]       [,6]
 [1,]  0.2132351 -153.082616  0.3574249 -0.4673098  115.94379   70.80559
 [2,]  0.4693177   -7.649684 -2.3700157 -1.6405732  220.86720   91.47692
 [3,]  0.4935603   40.548156  1.1362120  0.1765953 -123.12938 -180.19508
 [4,] -1.0789799   97.376701 -1.5270058 -1.4818171  -95.60945 -139.65575
 [5,]  0.3425627  -73.052410  1.5558464 -0.2739472  -74.54151  129.22480
 [6,] -0.7650650   52.751685  0.2993738 -1.5776469   58.24916  
**********************************************************************

Code ran without errors

Time consumed = 0.19903s

======================================================================
Inspecting script file apply1.R...

File contents are:

**********************************************************************
## Build a random matrix
M <- matrix(rnorm(100), 10, 10)

## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)

## Now the variance
RowVars <- apply(M, 1, var)
print (RowVars)

## By column
ColMeans <- apply(M, 2, mean)
print (ColMeans)
**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 


**********************************************************************
 [1]  0.11254649  0.24671744 -0.49929922  0.33892300  0.35485381 -0.17189109
 [7]  0.01610029  0.07428441  0.82966923  0.09302395
 [1] 0.5475807 0.7372173 1.1040113 0.4035361 1.9569355 1.0388958 1.0218927
 [8] 0.3856455 1.0011305 0.4118755
 [1] -0.12331226  0.07022981  0.25342467  0.51223316 -0.03869524 -0.28275310
 [7] -0.01972193  0.51118478  0.39540855  0.11692986

**********************************************************************

Code ran without errors

Time consumed = 0.18105s

======================================================================
Inspecting script file Girko.R...

File contents are:

**********************************************************************
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
  npoints = 250
  a <- seq(0, 2 * pi, length = npoints + 1)
  x <- hradius * cos(a)
  y <- vradius * sin(a)  
  return(data.frame(x = x, y = y))
}

N <- 250 # Assign size of the matrix

M <- matrix(rnorm(N * N), N, N) # Build the matrix

eigvals <- eigen(M)$values # Find the eigenvalues

eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe

my_radius <- sqrt(N) # The radius of the circle is sqrt(N)

ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse

names(ellDF) <- c("Real", "Imaginary") # rename the columns

# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
  geom_point(shape = I(3)) +
  theme(legend.position = "none")

# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))

# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p

#save to pdf
pdf("../results/Girko.pdf")
print(p)
dev.off()
**********************************************************************

Testing Girko.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in ggplot(eigDF, aes(x = Real, y = Imaginary)) : 
  could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file next.R...

File contents are:

**********************************************************************
for (i in 1:10) {
  if ((i %% 2) == 0) # check if the number is odd
    next # pass to next iteration of loop 
  print(i)
}
**********************************************************************

Testing next.R...

Output (only first 500 characters): 


**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9

**********************************************************************

Code ran without errors

Time consumed = 0.20862s

======================================================================
Inspecting script file plotLin.R...

File contents are:

**********************************************************************
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
  rnorm(length(x), mean = 0., sd = 2.5)

# and put them in a dataframe
my_data <- data.frame(x = x, y = y)

# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))

# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
                          colour = abs(my_lm$residual))
) +
  geom_point() +
  scale_colour_gradient(low = "black", high = "red") +
  theme(legend.position = "none") +
  scale_x_continuous(
    expression(alpha^2 * pi / beta * sqrt(Theta)))

# add the regression line
p <- p + geom_abline(
  intercept = my_lm$coefficients[1][1],
  slope = my_lm$coefficients[2][1],
  colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
                       label = "sqrt(alpha) * 2* pi"), 
                   parse = TRUE, size = 6, 
                   colour = "blue")

p
**********************************************************************

Testing plotLin.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in ggplot(my_data, aes(x = x, y = y, colour = abs(my_lm$residual))) : 
  could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file Florida.R...

File contents are:

**********************************************************************
library(ggplot2)
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
ls()
class(ats)
head(ats)
plot(ats)

#Compute the appropriate correlation coefficient 
corr <- cor(ats$Year, ats$Temp, method = "pearson")
print(corr)

#Repeat the calculation a sufficient 10000 times
corr_sam <- data.frame(matrix(unlist(replicate(10000, cor(ats$Year, sample(ats$Temp, replace = F), method = "pearson")))))

#Calculate what fraction of the random correlation coefficients were greater than the observed one
num <- 0
for (i in corr_sam){ #use loops to calculate abs
  if (abs(i) > abs(corr)){
    num <- num + 1
  }
}
p_value <- num/10000
print(p_value)

#interpret the results
ggplot(corr_sam,aes(num))+ geom_density(color="red",fill="grey") + xlab("Correlation coefficient") + ylab("Frequency")
ggsave("../results/Florida_plot.pdf")
dev.off()                    

**********************************************************************

Testing Florida.R...

Output (only first 500 characters): 


**********************************************************************
[1] "ats"
[1] "data.frame"
  Year     Temp
1 1901 23.75000
2 1902 24.66667
3 1903 24.71667
4 1904 24.51667
5 1905 24.88333
6 1906 24.63333
[1] 0.5331784

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in if (abs(i) > abs(corr)) { : the condition has length > 1
Execution halted

======================================================================
Inspecting script file sample.R...

File contents are:

**********************************************************************
######### Functions ##########

## A function to take a sample of size n from a population "popn" and return its mean
myexperiment <- function(popn,n) {
  pop_sample <- sample(popn, n, replace = FALSE)
  return(mean(pop_sample))
}

## Calculate means using a FOR loop on a vector without preallocation:
loopy_sample1 <- function(popn, n, num) {
  result1 <- vector() #Initialize empty vector of size 1 
  for(i in 1:num) {
    result1 <- c(result1, myexperiment(popn, n))
  }
  return(result1)
}

## To run "num" iterations of the experiment using a FOR loop on a vector with preallocation:
loopy_sample2 <- function(popn, n, num) {
  result2 <- vector(,num) #Preallocate expected size
  for(i in 1:num) {
    result2[i] <- myexperiment(popn, n)
  }
  return(result2)
}

## To run "num" iterations of the experiment using a FOR loop on a list with preallocation:
loopy_sample3 <- function(popn, n, num) {
  result3 <- vector("list", num) #Preallocate expected size
  for(i in 1:num) {
    result3[[i]] <- myexperiment(popn, n)
  }
  return(result3)
}


## To run "num" iterations of the experiment using vectorization with lapply:
lapply_sample <- function(popn, n, num) {
  result4 <- lapply(1:num, function(i) myexperiment(popn, n))
  return(result4)
}

## To run "num" iterations of the experiment using vectorization with sapply:
sapply_sample <- function(popn, n, num) {
  result5 <- sapply(1:num, function(i) myexperiment(popn, n))
  return(result5)
}

set.seed(12345)
popn <- rnorm(10000) # Generate the population
hist(popn)

n <- 100 # sample size for each experiment
num <- 10000 # Number of times to rerun the experiment

print("Using loops without preallocation on a vector took:" )
print(system.time(loopy_sample1(popn, n, num)))

print("Using loops with preallocation on a vector took:" )
print(system.time(loopy_sample2(popn, n, num)))

print("Using loops with preallocation on a list took:" )
print(system.time(loopy_sample3(popn, n, num)))

print("Using the vectorized sapply function (on a list) took:" )
print(system.time(sapply_sample(popn, n, num)))

print("Using the vectorized lapply function (on a list) took:" )
print(system.time(lapply_sample(popn, n, num)))
**********************************************************************

Testing sample.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops without preallocation on a vector took:"
   user  system elapsed 
  0.345   0.025   0.371 
[1] "Using loops with preallocation on a vector took:"
   user  system elapsed 
  0.216   0.005   0.221 
[1] "Using loops with preallocation on a list took:"
   user  system elapsed 
  0.261   0.000   0.262 
[1] "Using the vectorized sapply function (on a list) took:"
   user  system elapsed 
  0.241   0.000   0.241 
[1] "Using the vectorized lapply function (on a list) took:"
   user  syst
**********************************************************************

Code ran without errors

Time consumed = 1.65549s

======================================================================
Inspecting script file PP_Dists.R...

File contents are:

**********************************************************************
rm(list = ls())
library(ggplot2)
#read the data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

pdf("../results/Pred_Subplots.pdf")
par(mfrow=c(3,2))
for(feeding in unique(data$Type.of.feeding.interaction)){
  feeding_df <- data[data$Type.of.feeding.interaction == feeding, ]
  hist(feeding_df$Predator.mass, 
       main=paste("Distribution of Predator Mass for", feeding), 
       xlab=("Predator Mass"), ylab=("Frequency"),
       cex.main=1,7, cex.lab=0.8)
}
dev.off()

pdf("../results/Prey_Subplots.pdf")
par(mfrow=c(3,2))
for(feeding in unique(data$Type.of.feeding.interaction)){
  feeding_df <- data[data$Type.of.feeding.interaction == feeding, ]
  hist(feeding_df$Prey.mass, 
       main=paste("Distribution of Prey Mass for", feeding), 
       xlab=("Prey Mass"), ylab=("Frequency"),
       cex.main=1,7, cex.lab=0.8)
}
dev.off()

pdf("../results/SizeRatio_Subplots.pdf")
par(mfrow=c(3,2))
for(feeding in unique(data$Type.of.feeding.interaction)){
  feeding_df <- data[data$Type.of.feeding.interaction == feeding, ]
  hist(feeding_df$Prey.mass/feeding_df$Predator.mass,
       main=paste("Distribution of Size Ratio for", feeding), 
       xlab=("Size Ratio"), ylab=("Frequency"),
       cex.main=1,7, cex.lab=0.8)
}
dev.off()

results <- NULL
for(feeding in unique(data$Type.of.feeding.interaction)){
  feeding_df <- data[data$Type.of.feeding.interaction == feeding, ]
  result <- c(feeding, 
              mean(log(feeding_df$Predator.mass)), median(log(feeding_df$Predator.mass)),
              mean(log(feeding_df$Prey.mass)), median(log(feeding_df$Prey.mass)),
              mean(log(feeding_df$Prey.mass/feeding_df$Predator.mass)), median(log(feeding_df$Prey.mass/feeding_df$Predator.mass))
  )
  results <- c(results, result)
}

results <- matrix(results, byrow=T, nrow=5)
colnames(results) <- c("Feeding Type", "Mean of Log Predator Mass", "Median of Log Predator Mass", 
                       "Mean of Log Prey Mass", "Median of Log Prey Mass", "Mean of Log Size Rate", "Median of Log Size Rate")
write.csv(results, "../results/PP_Results.csv", row.names = F)

**********************************************************************

Testing PP_Dists.R...

Output (only first 500 characters): 


**********************************************************************
null device 
          1 
null device 
          1 
null device 
          1 

**********************************************************************

Code ran without errors

Time consumed = 0.94590s

======================================================================
Inspecting script file get_TreeHeight.py...

File contents are:

**********************************************************************
"""
Description:
This is the script for the week3 Groupwork on Tree Heights.

Required package for this script:
sys - used for taking argument from the command line
os - used for the elimination of extension from the input name when saving the output file
pandas - used to read the dataset
numpy - used for the mathematical computation

Date:
11 Dec 2022
"""

__author__ = "Xuan Wang xuan.wang22@imperial.ac.uk"
__appname__ = "get_TreeHeight.py"
__package__ = "sys, os, pandas, numpy"

# importing the required package
import sys
import os
import pandas as pd
import numpy as np

# taking the argument from command line
argv = str(sys.argv[1])

# loading dataset
path = ["../data/",argv]
treedata = pd.read_csv("".join(path))
# tree height definition
def TreeHeight(degrees, distance):
    """
    This function defines the function of tree height.
    """
    radians = degrees * np.pi / 180
    height = distance * np.tan(radians)
    return height

# adding the column of tree height to the data
treedata["Tree.Height.m"] = TreeHeight(treedata["Angle.degrees"], treedata["Distance.m"])

# select the first two rows of data
treedata = treedata.head(2)
treedata["Input_Name"] = argv

# saving the output file
path_results = ["../results/",os.path.splitext(argv)[0],"_treeheights.csv"]
treedata.to_csv("".join(path_results))


**********************************************************************

Testing get_TreeHeight.py...

get_TreeHeight.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2022-23/Coursework/StudentRepos/ShenggeTong_/week3/code/get_TreeHeight.py", line 26, in <module>
    argv = str(sys.argv[1])
IndexError: list index out of range

======================================================================
Inspecting script file SQLinR.R...

File contents are:

**********************************************************************
#install the sqlite package
install.packages('sqldf')

# To load the packages
library(sqldf)

# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')

# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
            "CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)")

# Once the table is created, we can enter the data.
#INSERT specifies where the data is entered (here the School table).
#VALUES contains the data

 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")


# Once we have our table, we can query the results using:

dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")


# Tables can be also imported from csv files.
# As example, let's use the Biotraits dataset.
# The easiest way is to read the csv files into R as data frames.
# Then the data frames are imported into the database.

Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R

# Import data frames into database
 dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)

# Check that the data have been correctly imported into the School table.
 dbListTables(db)                 # The tables in the database
 dbListFields(db,"Resource")       # The columns in a table
 dbReadTable(db, "Resource")    # The data in a table

# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from Râ€™s environment.
 dbDisconnect(db)            # Close connection
 rm(list = c("Resource"))   # Remove data frames



**********************************************************************

Testing SQLinR.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Installing package into â€˜/usr/local/lib/R/site-libraryâ€™
(as â€˜libâ€™ is unspecified)
Warning in install.packages("sqldf") :
  'lib = "/usr/local/lib/R/site-library"' is not writable
Error in install.packages("sqldf") : unable to install packages
Execution halted

======================================================================
Inspecting script file try.R...

File contents are:

**********************************************************************
doit <- function(x) {
  temp_x <- sample(x, replace = TRUE)
  if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
    print(paste("Mean of this sample was:", as.character(mean(temp_x))))
  } 
  else {
    stop("Couldn't calculate mean: too few unique values!")
  }
}

set.seed(1345) # again, to get the same result for illustration

popn <- rnorm(50)

# hist(popn)

# lapply(1:15, function(i) doit(popn))

result <- lapply(1:15, function(i) try(doit(popn), FALSE))

# class(result)

result <- vector("list", 15) #Preallocate/Initialize
for(i in 1:15) {
  result[[i]] <- try(doit(popn), FALSE)
}
**********************************************************************

Testing try.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Mean of this sample was: -0.11620822588674"
[1] "Mean of this sample was: -0.0468516755995931"
[1] "Mean of this sample was: -0.0890228211466614"
[1] "Mean of this sample was: -0.124229742255296"
[1] "Mean of this sample was: 0.0314144452816157"
[1] "Mean of this sample was: -0.233476945796405"
[1] "Mean of this sample was: -0.196681538928001"
[1] "Mean of this sample was: 0.0146969612111605"
[1] "Mean of this sample was: -0.234913159471725"
[1] "Mean of this sample was: -0.0497464588165691"
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in doit(popn) : Couldn't calculate mean: too few unique values!
Error in doit(popn) : Couldn't calculate mean: too few unique values!
Error in doit(popn) : Couldn't calculate mean: too few unique values!
Error in doit(popn) : Couldn't calculate mean: too few unique values!
Error in doit(popn) : Couldn't calculate mean: too few unique values!

======================================================================
Inspecting script file PP_regress_loc.R...

File contents are:

**********************************************************************
# Cleaning the environment
rm(list = ls())

# Loading the required packages
library(tidyverse)

# Loading the data as MyDF
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Converting the Prey mass to grams 
MyDF$Prey.mass[MyDF$Prey.mass.unit == 'mg'] <- 
    MyDF$Prey.mass[MyDF$Prey.mass.unit == 'mg']/1000

# Creating a dataframe of required columns only
new <- MyDF %>% select(Prey.mass, Predator.mass, 
                       Type.of.feeding.interaction, Predator.lifestage,
                       Location)

# Creating an empty data frame
new_df <- data.frame(Type.of.feeding.interaction = character(),
                     Predator.lifestage = character(),
                     Location = character(),
                     Regression.slope = double(), 
                     Regression.intercept = double(), 
                     R.squared = double(), 
                     F.statistic = double(),
                     p.value = double())

# Fitting linear regressions subset-wise and saving the required values to the 
# initialized dataframe

for(inter in unique(new$Type.of.feeding.interaction)){
    for(lifestage in unique(new$Predator.lifestage)){
        for(loc in unique(new$Location)){
            tmp <- new %>%
                filter(Type.of.feeding.interaction == inter,
                       Predator.lifestage == lifestage,
                       Location == loc)
            if(nrow(tmp) > 2){ # Only fitting regression if there are more than 2 observations
                mod <- lm(log10(Predator.mass)~log10(Prey.mass), data = tmp)
                tmp1 <- summary(mod)
                needed <- c(tmp1$coefficients[2,1],
                            tmp1$coefficients[1,1],
                            tmp1$adj.r.squared, 
                            tmp1$fstatistic[1], 
                            tmp1$coefficients[,4][2])
                new_df[nrow(new_df)+1,] <- c(inter, lifestage, loc, needed)
            }
        }
    }
}


# Writing the data frame to a results file
write.csv(new_df, file = '../results/PP_Regress_Results.csv', row.names = F)

**********************************************************************

Testing PP_regress_loc.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

â”€â”€ Attaching packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.0 â”€â”€
âœ” ggplot2 3.3.6     âœ” purrr   0.3.4
âœ” tibble  3.1.1     âœ” dplyr   1.0.6
âœ” tidyr   1.1.3     âœ” stringr 1.4.0
âœ” readr   1.4.0     âœ” forcats 0.5.0
â”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€
âœ– dplyr::filter() masks stats::filter()
âœ– dplyr::lag()    masks stats::lag()
Warning messages:
1: In summary.lm(mod) : essentially perfect fit: summary may be unreliable
2: In summary.lm(mod) : essentially perfect fit: summary may be unreliable

======================================================================
Inspecting script file FloridaYears.tex...

File contents are:

**********************************************************************
\documentclass{article}
\usepackage[utf8]{inputenc}

\title{Are temperatures of one year significantly correlated with the next year (successive years), across years in a given location?}
\author{CMEE Group 3 }
\date{December 2022}

\begin{document}

\maketitle

\section{Introduction}
There is significant evidence to assume that the temperature of Florida has been increasing over the years 1901 - 2000, and we wish to determine whether there is also a significant correlation between temperature over the successive years themselves.

\section{Method}
Under the assumption that temperature, the dependant variable is normally distributed, a  two tailed t-test was performed to determine an estimation for the correlation between temperatures across successive years. 

Since observations of the dependent variable (time) are not independent of each-other, a 2 tailed hypothesis test was performed with significance level $\alpha = 0.01$ and with the following null ($H_0$) and alternative ($H_A$) hypotheses, where $r$ is the true correlation, and $r_{observed}$ is the correlation observed within the data.
 \[ H_0: | r | <  r_{observed}\]
    \[H_A: |r| \geq r_{observed} \]

The measurements of temperature were permuted and assigned to years randomly for 10 000 trials. For each trial a paired sample t-test was performed on the newly generated data points and the corresponding correlation was recorded. This calculation was then compared with the correlation calculated for the true data, to investigate how likely a correlation as strong as the one observed is to occur within meaningless data.


\section{Results}
The paired sample t-test performed on the first 99 years and their successive years gave an estimated correlation of 0.3261697.

The correlations calculated for the randomly assigned temperature measurements were greater than 0.3261697 (or less than -0.3261697) for only 0.079\% of the trials. This gives an estimated p-value of 0.00079, which is substantially smaller than the significance level $\alpha$.

Therefore, we can reject $H_0$ and conclude that at a 1\% significance level, the data provides significant evidence that the temperature of Florida is positively correlated across successive years.

\end{document}

**********************************************************************

Testing FloridaYears.tex...

======================================================================
Inspecting script file MyBars.R...

File contents are:

**********************************************************************
a <- read.table("../data/Results.txt", header = TRUE)
head(a)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros

# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y1,
  size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)

# Print the second linerange
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y2,
  size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)

# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y3,
  size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)

# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))

# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
                            breaks = seq(3, 5, by = 0.05)) + 
  scale_y_continuous("My y axis") + 
  theme_bw() + 
  theme(legend.position = "none") 
p
**********************************************************************

Testing MyBars.R...

Output (only first 500 characters): 


**********************************************************************
         x   y1   y2 y3 Label
1 3.515424 4320 4320  0  <NA>
2 3.533984 2160 2160  0  <NA>
3 3.557647 4320 4320  0  <NA>
4 3.569953 4320 4320  0  <NA>
5 3.578984 8640 8640  0  <NA>
6 3.585665 2160 2160  0  <NA>

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in ggplot(a) : could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file control_flow.R...

File contents are:

**********************************************************************
a <- TRUE
if (a == TRUE) {
  print ("a is TRUE")
} else {
  print ("a is FALSE")
}

z <- runif(1) ## Generate a uniformly distributed random number
if (z <= 0.5) {print ("Less than a half")}

for (i in 1:10) {
  j <- i * i
  print(paste(i, " squared is", j ))
}

for(species in c('Heliodoxa rubinoides', 
                 'Boissonneaua jardini', 
                 'Sula nebouxii')) {
  print(paste('The species is', species))
}

v1 <- c("a","bc","def")
for (i in v1) {
  print(i)
}

i <- 0
while (i < 10) {
  i <- i+1
  print(i^2)
}


**********************************************************************

Testing control_flow.R...

Output (only first 500 characters): 


**********************************************************************
[1] "a is TRUE"
[1] "1  squared is 1"
[1] "2  squared is 4"
[1] "3  squared is 9"
[1] "4  squared is 16"
[1] "5  squared is 25"
[1] "6  squared is 36"
[1] "7  squared is 49"
[1] "8  squared is 64"
[1] "9  squared is 81"
[1] "10  squared is 100"
[1] "The species is Heliodoxa rubinoides"
[1] "The species is Boissonneaua jardini"
[1] "The species is Sula nebouxii"
[1] "a"
[1] "bc"
[1] "def"
[1] 1
[1] 4
[1] 9
[1] 16
[1] 25
[1] 36
[1] 49
[1] 64
[1] 81
[1] 100

**********************************************************************

Code ran without errors

Time consumed = 0.22128s

======================================================================
Inspecting script file TAutoCorr.R...

File contents are:

**********************************************************************
## TAutoCorr.R ##
load("../data/KeyWestAnnualMeanTemperature.RData")


df <- data.frame(ats$Temp[1:99], ats$Temp[2:100])
names(df) <- c("Temp", "Successive Temp")
 
# paired t-test
cor.test(df$Temp, df$`Successive Temp`)

## randomly permute time series ##


n <- 100000                 #number of trials
random_successes <- 0       #count of randomly generated correlations which are stronger than test statistic
success_list <- list()      #list random successes

for (i in 1:n){
  new_tempseries <- sample(ats$Temp, 100, replace = F)        #permutes temperature measurements
  new_DF <- data.frame(new_tempseries[1:99], new_tempseries[2:100])                 #forms new data frame of first 99 years and their successive years
  correlation <- as.numeric(cor.test(new_DF[[1]], new_DF[[2]])['estimate'])         #determines correlation
  if ( abs(correlation) >= cor.test(df$Temp, df$`Successive Temp`)['estimate'])  {  #counts and stores correlation if stronger than correlation observed for true data
    random_successes = random_successes + 1
    success_list <- append(success_list, correlation)
  }
}

#find percentage
rate = random_successes / n
print(rate)

#differenciate between negative and positive correlations
length(success_list[success_list < 0])
length(success_list[success_list > 0])
**********************************************************************

Testing TAutoCorr.R...

Output (only first 500 characters): 


**********************************************************************

	Pearson's product-moment correlation

data:  df$Temp and df$`Successive Temp`
t = 3.3982, df = 97, p-value = 0.0009852
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.1376191 0.4919077
sample estimates:
      cor 
0.3261697 


**********************************************************************

Code ran without errors

Time consumed = 10.00540s

======================================================================
Inspecting script file Ricker.R...

File contents are:

**********************************************************************
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
  # Runs a simulation of the Ricker model
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations)
  {
    N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
  }
  return (N)
}

plot(Ricker(generations=10), type="l")




**********************************************************************

Testing Ricker.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.23012s

======================================================================
Inspecting script file boilerplate.R...

File contents are:

**********************************************************************
# A boilerplate R script

MyFunction <- function(Arg1, Arg2) {
  
  # Statements involving Arg1, Arg2:
  print(paste("Argument", as.character(Arg1), "is a", class(Arg1))) # print Arg1's type
  print(paste("Argument", as.character(Arg2), "is a", class(Arg2))) # print Arg2's type
  
  return (c(Arg1, Arg2)) #this is optional, but very useful
}

MyFunction(1,2) #test the function
MyFunction("Riki","Tiki") #A different test
**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Argument 1 is a numeric"
[1] "Argument 2 is a numeric"
[1] 1 2
[1] "Argument Riki is a character"
[1] "Argument Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.19607s

======================================================================
Inspecting script file R_conditionals.R...

File contents are:

**********************************************************************
# Checks if an integer is even
is.even <- function(n = 2) {
  if (n %% 2 == 0) {
    return(paste(n,'is even!'))
  } else {
    return(paste(n,'is odd!'))
  }
}

is.even(6)

# Checks if a number is a power of 2
is.power2 <- function(n = 2) {
  if (log2(n) %% 1==0) {
    return(paste(n, 'is a power of 2!'))
  } else {
    return(paste(n,'is not a power of 2!'))
  }
}

is.power2(4)

# Checks if a number is prime
is.prime <- function(n) {
  if (n==0) {
    return(paste(n,'is a zero!'))
  } else if (n==1) {
    return(paste(n,'is just a unit!'))
  }
  
  ints <- 2:(n-1)
  
  if (all(n%%ints!=0)) {
    return(paste(n,'is a prime!'))
  } else {
    return(paste(n,'is a composite!'))
  }
}

is.prime(3)
**********************************************************************

Testing R_conditionals.R...

Output (only first 500 characters): 


**********************************************************************
[1] "6 is even!"
[1] "4 is a power of 2!"
[1] "3 is a prime!"

**********************************************************************

Code ran without errors

Time consumed = 0.18289s

======================================================================
Inspecting script file browse.R...

File contents are:

**********************************************************************
Exponential <- function(N0 = 1, r = 1, generations = 10) {
  # Runs a simulation of exponential growth
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations) {
    N[t] <- N[t-1] * exp(r)
    browser()
  }
  return (N)
}

plot(Exponential(), type="l", main="Exponential growth")
**********************************************************************

Testing browse.R...

Output (only first 500 characters): 


**********************************************************************
Called from: Exponential()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()

**********************************************************************

Code ran without errors

Time consumed = 0.23249s

======================================================================
Inspecting script file GPDD_Data.R...

File contents are:

**********************************************************************
# Language: R
# Author: Shengge Tong (shengge.tong22@imperial.ac.uk)
# Script: GPDD_Data.R
# Date: Nov, 2022

load("../data/GPDDFiltered.RData") #load GPDD data

library(maps) #load the maps package

map(database = "world", fill = TRUE, ylim = c(-100,100)) 

points(gpdd, col = "blue")
**********************************************************************

Testing GPDD_Data.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.46660s

======================================================================
Inspecting script file PP_Regress.R...

File contents are:

**********************************************************************
# Language: R
# Script: PP_Regress.R
# Author: Shengge Tong (shengge.tong22@imperial.ac.uk)
# Date: Nov, 2022

library(ggplot2)
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

pdf("../results/PP_Regress.pdf")
p <- ggplot(data, aes(x = Prey.mass, y = Predator.mass, color = Predator.lifestage)) +
  geom_point(aes(fill = Predator.lifestage, shape = Predator.lifestage)) +
  geom_smooth(method= "lm", fill="darkgrey") +
  facet_wrap(~ Type.of.feeding.interaction, ncol=1, strip.position = "right") + 
  theme_bw() +
  xlab("Prey Mass in grams") +
  ylab("Predator Mass in grams") +
  scale_x_log10() +
  scale_y_log10() +
  theme(legend.position = 'bottom',
        legend.text = element_text(size=6),
        legend.title = element_text(size=6)) +
  guides(fill = guide_legend(ncol = 6))
print(p)
dev.off()

results <- NULL
rows <- 0
for(feeding in unique(data$Type.of.feeding.interaction)){
  feeding_df <- data[data$Type.of.feeding.interaction == feeding, ]
  for(lifestage in unique(feeding_df$Predator.lifestage)){
    select_df <- feeding_df[feeding_df$Predator.lifestage == lifestage, ]
    if(nrow(select_df) > 2){
      model <- lm(log(Predator.mass) ~ log(Prey.mass), select_df)
      sum_model <- summary(model)
      f <- sum_model$fstatistic
      result <- c(feeding, lifestage, sum_model$coefficients[2, 1], sum_model$coefficients[1, 1],
                  sum_model$r.squared, f[1], pf(f[1],f[2],f[3],lower.tail=F))
      results <- c(results, result)
      rows <- rows+1
    }
  }
}
results <- matrix(results, byrow=T, nrow=rows)
colnames(results) <- c("Feeding Type", "Life Stage", "Slope", "Intercept", "R2", "F-statstic", "P-value")
write.csv(results, "../results/PP_Regress_Results.csv", row.names = F)


**********************************************************************

Testing PP_Regress.R...

Output (only first 500 characters): 


**********************************************************************
null device 
          1 

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

`geom_smooth()` using formula 'y ~ x'
Warning messages:
1: In qt((1 - level)/2, df) : NaNs produced
2: In max(ids, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf

======================================================================
Inspecting script file get_TreeHeight.R...

File contents are:

**********************************************************************
#!/usr/bin/env Rscript

# loading the packages
library(tools)

# loading data from the command line
argv <- commandArgs(trailingOnly = TRUE)
treedata <- read.csv(paste("../data/", argv[1], sep = ""))

TreeHeight <- function(degrees, distance) {

    radians <- degrees * pi / 180
    height <- distance * tan(radians)

    return(height)
}

for (Species in treedata) {
    treehgt <- TreeHeight(treedata$Angle.degrees, treedata$Distance.m)
    return(treehgt)
} 

## add the column of height to the data
treedata$Tree.Height.m <- treehgt

## select the first two rows of data
height_selected <- treedata[1:2,]
height_selected$Input_Name <- argv[1]

## saving the output file
output <- basename(file_path_sans_ext(argv[1]))
write.csv(height_selected, file = paste("../results/", output, "_treeheights.csv", sep = ""))
**********************************************************************

Testing get_TreeHeight.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in file(file, "rt") : cannot open the connection
Calls: read.csv -> read.table -> file
In addition: Warning message:
In file(file, "rt") :
  cannot open file '../data/NA': No such file or directory
Execution halted

======================================================================
Inspecting script file Vectorize2.R...

File contents are:

**********************************************************************
# Runs the stochastic Ricker equation with gaussian fluctuations

rm(list = ls())

stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{

  N <- matrix(NA, numyears, length(p0))  #initialize empty matrix

  N[1, ] <- p0

  for (pop in 1:length(p0)) { #loop through the populations

    for (yr in 2:numyears){ #for each pop, loop through the years

      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
    
     }
  
  }
 return(N)

}

# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance: 

rm(list = ls())
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  N <- matrix(NA, numyears, length(p0))
  N[1, ] <- p0
  for (yr in 2:numyears){
    N[yr, ] <- N[yr-1, ] * exp(r * (1 - N[yr - 1, ] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
  }
  return(N)
}

print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))

**********************************************************************

Testing Vectorize2.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Vectorized Stochastic Ricker takes:"
   user  system elapsed 
  0.021   0.005   0.025 

**********************************************************************

Code ran without errors

Time consumed = 0.22265s

======================================================================
Inspecting script file DataWrangTidy.R...

File contents are:

**********************************************************************
# Author: Shengge Tong (shengge.tong22@imperial.ac.uk)
# Script: DataWrangTidy.R
# Desc: Data wrangling using tidyverse
# Date: Oct, 2022
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
dplyr::glimpse(MyData) #str()
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
#require(reshape2) # load the reshape2 package

#?melt #check out the melt function

#MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
require(tidyverse)

MyWrangledData <- TempData %>% pivot_longer(cols = !c("Cultivation", "Block", "Plot", "Quadrat"))

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

dplyr::glimpse(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

############# Exploring the data (extend the script below)  ###############

**********************************************************************

Testing DataWrangTidy.R...

Output (only first 500 characters): 


**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.00698s

======================================================================
Inspecting script file preallocate.R...

File contents are:

**********************************************************************
NoPreallocFun <- function(x) {
  a <- vector() # empty vector
  for (i in 1:x) {
    a <- c(a, i) # concatenate
    print(a)
    print(object.size(a))
  }
}

system.time(NoPreallocFun(10))


PreallocFun <- function(x) {
  a <- rep(NA, x) # pre-allocated vector
  for (i in 1:x) {
    a[i] <- i # assign
    print(a)
    print(object.size(a))
  }
}

system.time(PreallocFun(10))
**********************************************************************

Testing preallocate.R...

Output (only first 500 characters): 


**********************************************************************
[1] 1
56 bytes
[1] 1 2
56 bytes
[1] 1 2 3
64 bytes
[1] 1 2 3 4
64 bytes
[1] 1 2 3 4 5
80 bytes
[1] 1 2 3 4 5 6
80 bytes
[1] 1 2 3 4 5 6 7
80 bytes
[1] 1 2 3 4 5 6 7 8
80 bytes
[1] 1 2 3 4 5 6 7 8 9
96 bytes
 [1]  1  2  3  4  5  6  7  8  9 10
96 bytes
   user  system elapsed 
  0.017   0.001   0.017 
 [1]  1 NA NA NA NA NA NA NA NA NA
96 bytes
 [1]  1  2 NA NA NA NA NA NA NA NA
96 bytes
 [1]  1  2  3 NA NA NA NA NA NA NA
96 bytes
 [1]  1  2  3  4 NA NA NA NA NA NA
96 bytes
 [1]  1  2  3  4  5 NA N
**********************************************************************

Code ran without errors

Time consumed = 0.25240s

======================================================================
Inspecting script file break.R...

File contents are:

**********************************************************************
i <- 0 #Initialize i
while (i < Inf) {
  if (i == 10) {
    break 
  } else { # Break out of the while loop!  
    cat("i equals " , i , " \n")
    i <- i + 1 # Update i
  }
}

**********************************************************************

Testing break.R...

Output (only first 500 characters): 


**********************************************************************
i equals  0  
i equals  1  
i equals  2  
i equals  3  
i equals  4  
i equals  5  
i equals  6  
i equals  7  
i equals  8  
i equals  9  

**********************************************************************

Code ran without errors

Time consumed = 0.19885s

======================================================================
Inspecting script file run_get_TreeHeight.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Xuan Wang xuan.wang22@imperial.ac.uk
# Date: 11 Dec 2022
# Description: This script runs both the get_TreeHeight files for R and python.

# Testing of R file
echo "R script started."
Rscript get_TreeHeight.R trees.csv
echo "R script done!"

# Testing of python file
echo "Python script started."
ipython3 get_TreeHeight.py trees.csv
echo "Python script done!"
**********************************************************************

Testing run_get_TreeHeight.sh...

Output (only first 500 characters): 


**********************************************************************
R script started.
R script done!
Python script started.
[22;0t]0;IPython: week3/codePython script done!

**********************************************************************

Code ran without errors

Time consumed = 0.98779s

======================================================================
Inspecting script file DataWrang.R...

File contents are:

**********************************************************************
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function

MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

############# Exploring the data (extend the script below)  ###############

**********************************************************************

Testing DataWrang.R...

Output (only first 500 characters): 


**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.01037s

======================================================================
Inspecting script file Florida.tex...

File contents are:

**********************************************************************
\documentclass{article}

\usepackage[letterpaper,top=2cm,bottom=2cm,left=3cm,right=3cm,marginparwidth=1.75cm]{geometry}
\usepackage{amsmath}
\usepackage{graphicx}
\graphicspath{{../sandbox/}}
\usepackage{float}

\title{Is Florida getting warmer?}
\author{Shengge Tong (shengge.tong22@imperial.ac.uk)}

\begin{document}
\maketitle

\section{Introduction}
In the question, we calculate the correlation coefficients between temperature and time

\subsection{Coefficient Efficient distribution}
See the plot below
\begin{figure}[H]
\centering
\includegraphics[width=0.6\textwidth]{../results/Florida_plot.pdf}
\caption{\label{fig:Florida_plot.pdf}Florida}
\end{figure}

\section{result}
  The correlation coeffcient is 0.533
\end{document}

**********************************************************************

Testing Florida.tex...

======================================================================
Inspecting script file TreeHeight.R...

File contents are:

**********************************************************************
# This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"

MyData <- read.csv("../data/tree.csv", header = TRUE)

TreeHeight <- function(degrees, distance) {
  radians <- degrees * pi / 180
  height <- distance * tan(radians)
  print(paste("Tree height is:", height))
  
  return (height)
}

MyData$Tree.Height.m = TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
write.csv(MyData,"../results/TreeHts.csv", row.names = F)
**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in file(file, "rt") : cannot open the connection
Calls: read.csv -> read.table -> file
In addition: Warning message:
In file(file, "rt") :
  cannot open file '../data/tree.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file basic_io.R...

File contents are:

**********************************************************************
MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers

write.csv(MyData, "../results/MyData.csv") #write it out as a new file

write.table(MyData[1,], file = "../results/MyData.csv",append=TRUE) # Append to it

write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names

write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names

**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Warning message:
In write.table(MyData[1, ], file = "../results/MyData.csv", append = TRUE) :
  appending column names to file

======================================================================
Inspecting script file Vectorize1.R...

File contents are:

**********************************************************************
M <- matrix(runif(1000000),1000,1000)

SumAllElements <- function(M) {
  Dimensions <- dim(M)
  Tot <- 0
  for (i in 1:Dimensions[1]) {
    for (j in 1:Dimensions[2]) {
      Tot <- Tot + M[i,j]
    }
  }
  return (Tot)
}

print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))

print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))

**********************************************************************

Testing Vectorize1.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops, the time taken is:"
   user  system elapsed 
  0.066   0.000   0.067 
[1] "Using the in-built vectorized function, the time taken is:"
   user  system elapsed 
  0.001   0.000   0.001 

**********************************************************************

Code ran without errors

Time consumed = 0.31923s

======================================================================
======================================================================
Finished running scripts

Ran into 12 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!